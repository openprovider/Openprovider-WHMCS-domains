<?php
/**
 * ResellerStatistics
 *
 * PHP version 5
 *
 * @category Class
 * @package  Openprovider\Api\Rest\Client\Person
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Reseller/Customer
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Openprovider\Api\Rest\Client\Person\Model;

use \ArrayAccess;
use Openprovider\Api\Rest\Client\Base\ObjectSerializer;
use Openprovider\Api\Rest\Client\Base\ModelInterface;

/**
 * ResellerStatistics Class Doc Comment
 *
 * @category Class
 * @package  Openprovider\Api\Rest\Client\Person
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ResellerStatistics implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'resellerStatistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'currency' => '\Openprovider\Api\Rest\Client\Person\Model\StatisticsCurrencyStatistics',
        'customer' => '\Openprovider\Api\Rest\Client\Person\Model\StatisticsCustomerStatistics',
        'dns' => '\Openprovider\Api\Rest\Client\Person\Model\StatisticsDnsStatistics',
        'domain' => '\Openprovider\Api\Rest\Client\Person\Model\StatisticsDomainStatistics',
        'level' => 'int',
        'license' => '\Openprovider\Api\Rest\Client\Person\Model\StatisticsLicenseStatistics',
        'spam_experts' => '\Openprovider\Api\Rest\Client\Person\Model\StatisticsSpamExpertsStatistics',
        'ssl' => '\Openprovider\Api\Rest\Client\Person\Model\StatisticsSslStatistics'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'currency' => null,
        'customer' => null,
        'dns' => null,
        'domain' => null,
        'level' => 'int32',
        'license' => null,
        'spam_experts' => null,
        'ssl' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency' => 'currency',
        'customer' => 'customer',
        'dns' => 'dns',
        'domain' => 'domain',
        'level' => 'level',
        'license' => 'license',
        'spam_experts' => 'spam_experts',
        'ssl' => 'ssl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency' => 'setCurrency',
        'customer' => 'setCustomer',
        'dns' => 'setDns',
        'domain' => 'setDomain',
        'level' => 'setLevel',
        'license' => 'setLicense',
        'spam_experts' => 'setSpamExperts',
        'ssl' => 'setSsl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency' => 'getCurrency',
        'customer' => 'getCustomer',
        'dns' => 'getDns',
        'domain' => 'getDomain',
        'level' => 'getLevel',
        'license' => 'getLicense',
        'spam_experts' => 'getSpamExperts',
        'ssl' => 'getSsl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['dns'] = isset($data['dns']) ? $data['dns'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['license'] = isset($data['license']) ? $data['license'] : null;
        $this->container['spam_experts'] = isset($data['spam_experts']) ? $data['spam_experts'] : null;
        $this->container['ssl'] = isset($data['ssl']) ? $data['ssl'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency
     *
     * @return \Openprovider\Api\Rest\Client\Person\Model\StatisticsCurrencyStatistics|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Openprovider\Api\Rest\Client\Person\Model\StatisticsCurrencyStatistics|null $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Openprovider\Api\Rest\Client\Person\Model\StatisticsCustomerStatistics|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Openprovider\Api\Rest\Client\Person\Model\StatisticsCustomerStatistics|null $customer customer
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets dns
     *
     * @return \Openprovider\Api\Rest\Client\Person\Model\StatisticsDnsStatistics|null
     */
    public function getDns()
    {
        return $this->container['dns'];
    }

    /**
     * Sets dns
     *
     * @param \Openprovider\Api\Rest\Client\Person\Model\StatisticsDnsStatistics|null $dns dns
     *
     * @return $this
     */
    public function setDns($dns)
    {
        $this->container['dns'] = $dns;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return \Openprovider\Api\Rest\Client\Person\Model\StatisticsDomainStatistics|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param \Openprovider\Api\Rest\Client\Person\Model\StatisticsDomainStatistics|null $domain domain
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets level
     *
     * @return int|null
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param int|null $level level
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets license
     *
     * @return \Openprovider\Api\Rest\Client\Person\Model\StatisticsLicenseStatistics|null
     */
    public function getLicense()
    {
        return $this->container['license'];
    }

    /**
     * Sets license
     *
     * @param \Openprovider\Api\Rest\Client\Person\Model\StatisticsLicenseStatistics|null $license license
     *
     * @return $this
     */
    public function setLicense($license)
    {
        $this->container['license'] = $license;

        return $this;
    }

    /**
     * Gets spam_experts
     *
     * @return \Openprovider\Api\Rest\Client\Person\Model\StatisticsSpamExpertsStatistics|null
     */
    public function getSpamExperts()
    {
        return $this->container['spam_experts'];
    }

    /**
     * Sets spam_experts
     *
     * @param \Openprovider\Api\Rest\Client\Person\Model\StatisticsSpamExpertsStatistics|null $spam_experts spam_experts
     *
     * @return $this
     */
    public function setSpamExperts($spam_experts)
    {
        $this->container['spam_experts'] = $spam_experts;

        return $this;
    }

    /**
     * Gets ssl
     *
     * @return \Openprovider\Api\Rest\Client\Person\Model\StatisticsSslStatistics|null
     */
    public function getSsl()
    {
        return $this->container['ssl'];
    }

    /**
     * Sets ssl
     *
     * @param \Openprovider\Api\Rest\Client\Person\Model\StatisticsSslStatistics|null $ssl ssl
     *
     * @return $this
     */
    public function setSsl($ssl)
    {
        $this->container['ssl'] = $ssl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


