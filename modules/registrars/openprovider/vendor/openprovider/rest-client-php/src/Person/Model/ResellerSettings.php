<?php
/**
 * ResellerSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Openprovider\Api\Rest\Client\Person
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Reseller/Customer
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Openprovider\Api\Rest\Client\Person\Model;

use \ArrayAccess;
use Openprovider\Api\Rest\Client\Base\ObjectSerializer;
use Openprovider\Api\Rest\Client\Base\ModelInterface;

/**
 * ResellerSettings Class Doc Comment
 *
 * @category Class
 * @package  Openprovider\Api\Rest\Client\Person
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ResellerSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'resellerSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'av_handle' => 'string',
        'claims_confirm_url' => 'string',
        'claims_email_subject' => 'string',
        'claims_reseller_name' => 'string',
        'claims_sender_email' => 'string',
        'currency' => 'string',
        'default_domain_billing_handle' => 'string',
        'default_domain_reseller_handle' => 'string',
        'foa_confirm_url' => 'string',
        'foa_email_subject' => 'string',
        'foa_reseller_name' => 'string',
        'foa_sender_email' => 'string',
        'foa_terms_conditions_url' => 'string',
        'is_auto_renew_enabled' => 'bool',
        'is_custom_nses_enabled' => 'bool',
        'ive2_customized_body' => 'string',
        'ive2_email_subject' => 'string',
        'ive_confirm_url' => 'string',
        'ive_customized_body' => 'string',
        'ive_email_subject' => 'string',
        'ive_reseller_name' => 'string',
        'ive_sender_email' => 'string',
        'jurisdiction' => 'string',
        'language' => 'string',
        'maximum_credit' => 'float',
        'maximum_credit_card_payment' => 'float',
        'maximum_i_deal_payment' => 'float',
        'maximum_western_union_payment' => 'float',
        'minimum_payment' => 'float',
        'minimum_western_union_payment' => 'float',
        'pay_methods' => 'string[]',
        'payment_methods' => '\Openprovider\Api\Rest\Client\Person\Model\SettingsPaymentMethods[]',
        'preregistered_domain_priorities' => 'string',
        'recurring_payment_methods' => '\Openprovider\Api\Rest\Client\Person\Model\SettingsPaymentMethods[]',
        'renew_notification_days' => 'int[]',
        'renew_notification_every_week' => 'bool',
        'tac_contract' => '\Openprovider\Api\Rest\Client\Person\Model\SettingsTacContract',
        'tags' => 'string[]',
        'transaction_fee' => '\Openprovider\Api\Rest\Client\Person\Model\SettingsTransactionFee',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'av_handle' => null,
        'claims_confirm_url' => null,
        'claims_email_subject' => null,
        'claims_reseller_name' => null,
        'claims_sender_email' => null,
        'currency' => null,
        'default_domain_billing_handle' => null,
        'default_domain_reseller_handle' => null,
        'foa_confirm_url' => null,
        'foa_email_subject' => null,
        'foa_reseller_name' => null,
        'foa_sender_email' => null,
        'foa_terms_conditions_url' => null,
        'is_auto_renew_enabled' => 'boolean',
        'is_custom_nses_enabled' => 'boolean',
        'ive2_customized_body' => null,
        'ive2_email_subject' => null,
        'ive_confirm_url' => null,
        'ive_customized_body' => null,
        'ive_email_subject' => null,
        'ive_reseller_name' => null,
        'ive_sender_email' => null,
        'jurisdiction' => null,
        'language' => null,
        'maximum_credit' => 'double',
        'maximum_credit_card_payment' => 'double',
        'maximum_i_deal_payment' => 'double',
        'maximum_western_union_payment' => 'double',
        'minimum_payment' => 'double',
        'minimum_western_union_payment' => 'double',
        'pay_methods' => null,
        'payment_methods' => null,
        'preregistered_domain_priorities' => null,
        'recurring_payment_methods' => null,
        'renew_notification_days' => 'int32',
        'renew_notification_every_week' => 'boolean',
        'tac_contract' => null,
        'tags' => null,
        'transaction_fee' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'av_handle' => 'av_handle',
        'claims_confirm_url' => 'claims_confirm_url',
        'claims_email_subject' => 'claims_email_subject',
        'claims_reseller_name' => 'claims_reseller_name',
        'claims_sender_email' => 'claims_sender_email',
        'currency' => 'currency',
        'default_domain_billing_handle' => 'default_domain_billing_handle',
        'default_domain_reseller_handle' => 'default_domain_reseller_handle',
        'foa_confirm_url' => 'foa_confirm_url',
        'foa_email_subject' => 'foa_email_subject',
        'foa_reseller_name' => 'foa_reseller_name',
        'foa_sender_email' => 'foa_sender_email',
        'foa_terms_conditions_url' => 'foa_terms_conditions_url',
        'is_auto_renew_enabled' => 'is_auto_renew_enabled',
        'is_custom_nses_enabled' => 'is_custom_nses_enabled',
        'ive2_customized_body' => 'ive2_customized_body',
        'ive2_email_subject' => 'ive2_email_subject',
        'ive_confirm_url' => 'ive_confirm_url',
        'ive_customized_body' => 'ive_customized_body',
        'ive_email_subject' => 'ive_email_subject',
        'ive_reseller_name' => 'ive_reseller_name',
        'ive_sender_email' => 'ive_sender_email',
        'jurisdiction' => 'jurisdiction',
        'language' => 'language',
        'maximum_credit' => 'maximum_credit',
        'maximum_credit_card_payment' => 'maximum_credit_card_payment',
        'maximum_i_deal_payment' => 'maximum_i_deal_payment',
        'maximum_western_union_payment' => 'maximum_western_union_payment',
        'minimum_payment' => 'minimum_payment',
        'minimum_western_union_payment' => 'minimum_western_union_payment',
        'pay_methods' => 'pay_methods',
        'payment_methods' => 'payment_methods',
        'preregistered_domain_priorities' => 'preregistered_domain_priorities',
        'recurring_payment_methods' => 'recurring_payment_methods',
        'renew_notification_days' => 'renew_notification_days',
        'renew_notification_every_week' => 'renew_notification_every_week',
        'tac_contract' => 'tac_contract',
        'tags' => 'tags',
        'transaction_fee' => 'transaction_fee',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'av_handle' => 'setAvHandle',
        'claims_confirm_url' => 'setClaimsConfirmUrl',
        'claims_email_subject' => 'setClaimsEmailSubject',
        'claims_reseller_name' => 'setClaimsResellerName',
        'claims_sender_email' => 'setClaimsSenderEmail',
        'currency' => 'setCurrency',
        'default_domain_billing_handle' => 'setDefaultDomainBillingHandle',
        'default_domain_reseller_handle' => 'setDefaultDomainResellerHandle',
        'foa_confirm_url' => 'setFoaConfirmUrl',
        'foa_email_subject' => 'setFoaEmailSubject',
        'foa_reseller_name' => 'setFoaResellerName',
        'foa_sender_email' => 'setFoaSenderEmail',
        'foa_terms_conditions_url' => 'setFoaTermsConditionsUrl',
        'is_auto_renew_enabled' => 'setIsAutoRenewEnabled',
        'is_custom_nses_enabled' => 'setIsCustomNsesEnabled',
        'ive2_customized_body' => 'setIve2CustomizedBody',
        'ive2_email_subject' => 'setIve2EmailSubject',
        'ive_confirm_url' => 'setIveConfirmUrl',
        'ive_customized_body' => 'setIveCustomizedBody',
        'ive_email_subject' => 'setIveEmailSubject',
        'ive_reseller_name' => 'setIveResellerName',
        'ive_sender_email' => 'setIveSenderEmail',
        'jurisdiction' => 'setJurisdiction',
        'language' => 'setLanguage',
        'maximum_credit' => 'setMaximumCredit',
        'maximum_credit_card_payment' => 'setMaximumCreditCardPayment',
        'maximum_i_deal_payment' => 'setMaximumIDealPayment',
        'maximum_western_union_payment' => 'setMaximumWesternUnionPayment',
        'minimum_payment' => 'setMinimumPayment',
        'minimum_western_union_payment' => 'setMinimumWesternUnionPayment',
        'pay_methods' => 'setPayMethods',
        'payment_methods' => 'setPaymentMethods',
        'preregistered_domain_priorities' => 'setPreregisteredDomainPriorities',
        'recurring_payment_methods' => 'setRecurringPaymentMethods',
        'renew_notification_days' => 'setRenewNotificationDays',
        'renew_notification_every_week' => 'setRenewNotificationEveryWeek',
        'tac_contract' => 'setTacContract',
        'tags' => 'setTags',
        'transaction_fee' => 'setTransactionFee',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'av_handle' => 'getAvHandle',
        'claims_confirm_url' => 'getClaimsConfirmUrl',
        'claims_email_subject' => 'getClaimsEmailSubject',
        'claims_reseller_name' => 'getClaimsResellerName',
        'claims_sender_email' => 'getClaimsSenderEmail',
        'currency' => 'getCurrency',
        'default_domain_billing_handle' => 'getDefaultDomainBillingHandle',
        'default_domain_reseller_handle' => 'getDefaultDomainResellerHandle',
        'foa_confirm_url' => 'getFoaConfirmUrl',
        'foa_email_subject' => 'getFoaEmailSubject',
        'foa_reseller_name' => 'getFoaResellerName',
        'foa_sender_email' => 'getFoaSenderEmail',
        'foa_terms_conditions_url' => 'getFoaTermsConditionsUrl',
        'is_auto_renew_enabled' => 'getIsAutoRenewEnabled',
        'is_custom_nses_enabled' => 'getIsCustomNsesEnabled',
        'ive2_customized_body' => 'getIve2CustomizedBody',
        'ive2_email_subject' => 'getIve2EmailSubject',
        'ive_confirm_url' => 'getIveConfirmUrl',
        'ive_customized_body' => 'getIveCustomizedBody',
        'ive_email_subject' => 'getIveEmailSubject',
        'ive_reseller_name' => 'getIveResellerName',
        'ive_sender_email' => 'getIveSenderEmail',
        'jurisdiction' => 'getJurisdiction',
        'language' => 'getLanguage',
        'maximum_credit' => 'getMaximumCredit',
        'maximum_credit_card_payment' => 'getMaximumCreditCardPayment',
        'maximum_i_deal_payment' => 'getMaximumIDealPayment',
        'maximum_western_union_payment' => 'getMaximumWesternUnionPayment',
        'minimum_payment' => 'getMinimumPayment',
        'minimum_western_union_payment' => 'getMinimumWesternUnionPayment',
        'pay_methods' => 'getPayMethods',
        'payment_methods' => 'getPaymentMethods',
        'preregistered_domain_priorities' => 'getPreregisteredDomainPriorities',
        'recurring_payment_methods' => 'getRecurringPaymentMethods',
        'renew_notification_days' => 'getRenewNotificationDays',
        'renew_notification_every_week' => 'getRenewNotificationEveryWeek',
        'tac_contract' => 'getTacContract',
        'tags' => 'getTags',
        'transaction_fee' => 'getTransactionFee',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    #[\ReturnTypeWillChange]
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['av_handle'] = isset($data['av_handle']) ? $data['av_handle'] : null;
        $this->container['claims_confirm_url'] = isset($data['claims_confirm_url']) ? $data['claims_confirm_url'] : null;
        $this->container['claims_email_subject'] = isset($data['claims_email_subject']) ? $data['claims_email_subject'] : null;
        $this->container['claims_reseller_name'] = isset($data['claims_reseller_name']) ? $data['claims_reseller_name'] : null;
        $this->container['claims_sender_email'] = isset($data['claims_sender_email']) ? $data['claims_sender_email'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['default_domain_billing_handle'] = isset($data['default_domain_billing_handle']) ? $data['default_domain_billing_handle'] : null;
        $this->container['default_domain_reseller_handle'] = isset($data['default_domain_reseller_handle']) ? $data['default_domain_reseller_handle'] : null;
        $this->container['foa_confirm_url'] = isset($data['foa_confirm_url']) ? $data['foa_confirm_url'] : null;
        $this->container['foa_email_subject'] = isset($data['foa_email_subject']) ? $data['foa_email_subject'] : null;
        $this->container['foa_reseller_name'] = isset($data['foa_reseller_name']) ? $data['foa_reseller_name'] : null;
        $this->container['foa_sender_email'] = isset($data['foa_sender_email']) ? $data['foa_sender_email'] : null;
        $this->container['foa_terms_conditions_url'] = isset($data['foa_terms_conditions_url']) ? $data['foa_terms_conditions_url'] : null;
        $this->container['is_auto_renew_enabled'] = isset($data['is_auto_renew_enabled']) ? $data['is_auto_renew_enabled'] : null;
        $this->container['is_custom_nses_enabled'] = isset($data['is_custom_nses_enabled']) ? $data['is_custom_nses_enabled'] : null;
        $this->container['ive2_customized_body'] = isset($data['ive2_customized_body']) ? $data['ive2_customized_body'] : null;
        $this->container['ive2_email_subject'] = isset($data['ive2_email_subject']) ? $data['ive2_email_subject'] : null;
        $this->container['ive_confirm_url'] = isset($data['ive_confirm_url']) ? $data['ive_confirm_url'] : null;
        $this->container['ive_customized_body'] = isset($data['ive_customized_body']) ? $data['ive_customized_body'] : null;
        $this->container['ive_email_subject'] = isset($data['ive_email_subject']) ? $data['ive_email_subject'] : null;
        $this->container['ive_reseller_name'] = isset($data['ive_reseller_name']) ? $data['ive_reseller_name'] : null;
        $this->container['ive_sender_email'] = isset($data['ive_sender_email']) ? $data['ive_sender_email'] : null;
        $this->container['jurisdiction'] = isset($data['jurisdiction']) ? $data['jurisdiction'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['maximum_credit'] = isset($data['maximum_credit']) ? $data['maximum_credit'] : null;
        $this->container['maximum_credit_card_payment'] = isset($data['maximum_credit_card_payment']) ? $data['maximum_credit_card_payment'] : null;
        $this->container['maximum_i_deal_payment'] = isset($data['maximum_i_deal_payment']) ? $data['maximum_i_deal_payment'] : null;
        $this->container['maximum_western_union_payment'] = isset($data['maximum_western_union_payment']) ? $data['maximum_western_union_payment'] : null;
        $this->container['minimum_payment'] = isset($data['minimum_payment']) ? $data['minimum_payment'] : null;
        $this->container['minimum_western_union_payment'] = isset($data['minimum_western_union_payment']) ? $data['minimum_western_union_payment'] : null;
        $this->container['pay_methods'] = isset($data['pay_methods']) ? $data['pay_methods'] : null;
        $this->container['payment_methods'] = isset($data['payment_methods']) ? $data['payment_methods'] : null;
        $this->container['preregistered_domain_priorities'] = isset($data['preregistered_domain_priorities']) ? $data['preregistered_domain_priorities'] : null;
        $this->container['recurring_payment_methods'] = isset($data['recurring_payment_methods']) ? $data['recurring_payment_methods'] : null;
        $this->container['renew_notification_days'] = isset($data['renew_notification_days']) ? $data['renew_notification_days'] : null;
        $this->container['renew_notification_every_week'] = isset($data['renew_notification_every_week']) ? $data['renew_notification_every_week'] : null;
        $this->container['tac_contract'] = isset($data['tac_contract']) ? $data['tac_contract'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['transaction_fee'] = isset($data['transaction_fee']) ? $data['transaction_fee'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    #[\ReturnTypeWillChange]
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    #[\ReturnTypeWillChange]
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets av_handle
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getAvHandle()
    {
        return $this->container['av_handle'];
    }

    /**
     * Sets av_handle
     *
     * @param string|null $av_handle av_handle
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setAvHandle($av_handle)
    {
        $this->container['av_handle'] = $av_handle;

        return $this;
    }

    /**
     * Gets claims_confirm_url
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getClaimsConfirmUrl()
    {
        return $this->container['claims_confirm_url'];
    }

    /**
     * Sets claims_confirm_url
     *
     * @param string|null $claims_confirm_url claims_confirm_url
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setClaimsConfirmUrl($claims_confirm_url)
    {
        $this->container['claims_confirm_url'] = $claims_confirm_url;

        return $this;
    }

    /**
     * Gets claims_email_subject
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getClaimsEmailSubject()
    {
        return $this->container['claims_email_subject'];
    }

    /**
     * Sets claims_email_subject
     *
     * @param string|null $claims_email_subject claims_email_subject
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setClaimsEmailSubject($claims_email_subject)
    {
        $this->container['claims_email_subject'] = $claims_email_subject;

        return $this;
    }

    /**
     * Gets claims_reseller_name
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getClaimsResellerName()
    {
        return $this->container['claims_reseller_name'];
    }

    /**
     * Sets claims_reseller_name
     *
     * @param string|null $claims_reseller_name claims_reseller_name
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setClaimsResellerName($claims_reseller_name)
    {
        $this->container['claims_reseller_name'] = $claims_reseller_name;

        return $this;
    }

    /**
     * Gets claims_sender_email
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getClaimsSenderEmail()
    {
        return $this->container['claims_sender_email'];
    }

    /**
     * Sets claims_sender_email
     *
     * @param string|null $claims_sender_email claims_sender_email
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setClaimsSenderEmail($claims_sender_email)
    {
        $this->container['claims_sender_email'] = $claims_sender_email;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets default_domain_billing_handle
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getDefaultDomainBillingHandle()
    {
        return $this->container['default_domain_billing_handle'];
    }

    /**
     * Sets default_domain_billing_handle
     *
     * @param string|null $default_domain_billing_handle default_domain_billing_handle
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setDefaultDomainBillingHandle($default_domain_billing_handle)
    {
        $this->container['default_domain_billing_handle'] = $default_domain_billing_handle;

        return $this;
    }

    /**
     * Gets default_domain_reseller_handle
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getDefaultDomainResellerHandle()
    {
        return $this->container['default_domain_reseller_handle'];
    }

    /**
     * Sets default_domain_reseller_handle
     *
     * @param string|null $default_domain_reseller_handle default_domain_reseller_handle
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setDefaultDomainResellerHandle($default_domain_reseller_handle)
    {
        $this->container['default_domain_reseller_handle'] = $default_domain_reseller_handle;

        return $this;
    }

    /**
     * Gets foa_confirm_url
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getFoaConfirmUrl()
    {
        return $this->container['foa_confirm_url'];
    }

    /**
     * Sets foa_confirm_url
     *
     * @param string|null $foa_confirm_url foa_confirm_url
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setFoaConfirmUrl($foa_confirm_url)
    {
        $this->container['foa_confirm_url'] = $foa_confirm_url;

        return $this;
    }

    /**
     * Gets foa_email_subject
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getFoaEmailSubject()
    {
        return $this->container['foa_email_subject'];
    }

    /**
     * Sets foa_email_subject
     *
     * @param string|null $foa_email_subject foa_email_subject
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setFoaEmailSubject($foa_email_subject)
    {
        $this->container['foa_email_subject'] = $foa_email_subject;

        return $this;
    }

    /**
     * Gets foa_reseller_name
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getFoaResellerName()
    {
        return $this->container['foa_reseller_name'];
    }

    /**
     * Sets foa_reseller_name
     *
     * @param string|null $foa_reseller_name foa_reseller_name
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setFoaResellerName($foa_reseller_name)
    {
        $this->container['foa_reseller_name'] = $foa_reseller_name;

        return $this;
    }

    /**
     * Gets foa_sender_email
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getFoaSenderEmail()
    {
        return $this->container['foa_sender_email'];
    }

    /**
     * Sets foa_sender_email
     *
     * @param string|null $foa_sender_email foa_sender_email
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setFoaSenderEmail($foa_sender_email)
    {
        $this->container['foa_sender_email'] = $foa_sender_email;

        return $this;
    }

    /**
     * Gets foa_terms_conditions_url
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getFoaTermsConditionsUrl()
    {
        return $this->container['foa_terms_conditions_url'];
    }

    /**
     * Sets foa_terms_conditions_url
     *
     * @param string|null $foa_terms_conditions_url foa_terms_conditions_url
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setFoaTermsConditionsUrl($foa_terms_conditions_url)
    {
        $this->container['foa_terms_conditions_url'] = $foa_terms_conditions_url;

        return $this;
    }

    /**
     * Gets is_auto_renew_enabled
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getIsAutoRenewEnabled()
    {
        return $this->container['is_auto_renew_enabled'];
    }

    /**
     * Sets is_auto_renew_enabled
     *
     * @param bool|null $is_auto_renew_enabled is_auto_renew_enabled
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsAutoRenewEnabled($is_auto_renew_enabled)
    {
        $this->container['is_auto_renew_enabled'] = $is_auto_renew_enabled;

        return $this;
    }

    /**
     * Gets is_custom_nses_enabled
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getIsCustomNsesEnabled()
    {
        return $this->container['is_custom_nses_enabled'];
    }

    /**
     * Sets is_custom_nses_enabled
     *
     * @param bool|null $is_custom_nses_enabled is_custom_nses_enabled
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsCustomNsesEnabled($is_custom_nses_enabled)
    {
        $this->container['is_custom_nses_enabled'] = $is_custom_nses_enabled;

        return $this;
    }

    /**
     * Gets ive2_customized_body
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getIve2CustomizedBody()
    {
        return $this->container['ive2_customized_body'];
    }

    /**
     * Sets ive2_customized_body
     *
     * @param string|null $ive2_customized_body ive2_customized_body
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIve2CustomizedBody($ive2_customized_body)
    {
        $this->container['ive2_customized_body'] = $ive2_customized_body;

        return $this;
    }

    /**
     * Gets ive2_email_subject
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getIve2EmailSubject()
    {
        return $this->container['ive2_email_subject'];
    }

    /**
     * Sets ive2_email_subject
     *
     * @param string|null $ive2_email_subject ive2_email_subject
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIve2EmailSubject($ive2_email_subject)
    {
        $this->container['ive2_email_subject'] = $ive2_email_subject;

        return $this;
    }

    /**
     * Gets ive_confirm_url
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getIveConfirmUrl()
    {
        return $this->container['ive_confirm_url'];
    }

    /**
     * Sets ive_confirm_url
     *
     * @param string|null $ive_confirm_url ive_confirm_url
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIveConfirmUrl($ive_confirm_url)
    {
        $this->container['ive_confirm_url'] = $ive_confirm_url;

        return $this;
    }

    /**
     * Gets ive_customized_body
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getIveCustomizedBody()
    {
        return $this->container['ive_customized_body'];
    }

    /**
     * Sets ive_customized_body
     *
     * @param string|null $ive_customized_body ive_customized_body
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIveCustomizedBody($ive_customized_body)
    {
        $this->container['ive_customized_body'] = $ive_customized_body;

        return $this;
    }

    /**
     * Gets ive_email_subject
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getIveEmailSubject()
    {
        return $this->container['ive_email_subject'];
    }

    /**
     * Sets ive_email_subject
     *
     * @param string|null $ive_email_subject ive_email_subject
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIveEmailSubject($ive_email_subject)
    {
        $this->container['ive_email_subject'] = $ive_email_subject;

        return $this;
    }

    /**
     * Gets ive_reseller_name
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getIveResellerName()
    {
        return $this->container['ive_reseller_name'];
    }

    /**
     * Sets ive_reseller_name
     *
     * @param string|null $ive_reseller_name ive_reseller_name
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIveResellerName($ive_reseller_name)
    {
        $this->container['ive_reseller_name'] = $ive_reseller_name;

        return $this;
    }

    /**
     * Gets ive_sender_email
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getIveSenderEmail()
    {
        return $this->container['ive_sender_email'];
    }

    /**
     * Sets ive_sender_email
     *
     * @param string|null $ive_sender_email ive_sender_email
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIveSenderEmail($ive_sender_email)
    {
        $this->container['ive_sender_email'] = $ive_sender_email;

        return $this;
    }

    /**
     * Gets jurisdiction
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getJurisdiction()
    {
        return $this->container['jurisdiction'];
    }

    /**
     * Sets jurisdiction
     *
     * @param string|null $jurisdiction jurisdiction
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setJurisdiction($jurisdiction)
    {
        $this->container['jurisdiction'] = $jurisdiction;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets maximum_credit
     *
     * @return float|null
     */
    #[\ReturnTypeWillChange]
    public function getMaximumCredit()
    {
        return $this->container['maximum_credit'];
    }

    /**
     * Sets maximum_credit
     *
     * @param float|null $maximum_credit maximum_credit
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setMaximumCredit($maximum_credit)
    {
        $this->container['maximum_credit'] = $maximum_credit;

        return $this;
    }

    /**
     * Gets maximum_credit_card_payment
     *
     * @return float|null
     */
    #[\ReturnTypeWillChange]
    public function getMaximumCreditCardPayment()
    {
        return $this->container['maximum_credit_card_payment'];
    }

    /**
     * Sets maximum_credit_card_payment
     *
     * @param float|null $maximum_credit_card_payment maximum_credit_card_payment
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setMaximumCreditCardPayment($maximum_credit_card_payment)
    {
        $this->container['maximum_credit_card_payment'] = $maximum_credit_card_payment;

        return $this;
    }

    /**
     * Gets maximum_i_deal_payment
     *
     * @return float|null
     */
    #[\ReturnTypeWillChange]
    public function getMaximumIDealPayment()
    {
        return $this->container['maximum_i_deal_payment'];
    }

    /**
     * Sets maximum_i_deal_payment
     *
     * @param float|null $maximum_i_deal_payment maximum_i_deal_payment
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setMaximumIDealPayment($maximum_i_deal_payment)
    {
        $this->container['maximum_i_deal_payment'] = $maximum_i_deal_payment;

        return $this;
    }

    /**
     * Gets maximum_western_union_payment
     *
     * @return float|null
     */
    #[\ReturnTypeWillChange]
    public function getMaximumWesternUnionPayment()
    {
        return $this->container['maximum_western_union_payment'];
    }

    /**
     * Sets maximum_western_union_payment
     *
     * @param float|null $maximum_western_union_payment maximum_western_union_payment
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setMaximumWesternUnionPayment($maximum_western_union_payment)
    {
        $this->container['maximum_western_union_payment'] = $maximum_western_union_payment;

        return $this;
    }

    /**
     * Gets minimum_payment
     *
     * @return float|null
     */
    #[\ReturnTypeWillChange]
    public function getMinimumPayment()
    {
        return $this->container['minimum_payment'];
    }

    /**
     * Sets minimum_payment
     *
     * @param float|null $minimum_payment minimum_payment
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setMinimumPayment($minimum_payment)
    {
        $this->container['minimum_payment'] = $minimum_payment;

        return $this;
    }

    /**
     * Gets minimum_western_union_payment
     *
     * @return float|null
     */
    #[\ReturnTypeWillChange]
    public function getMinimumWesternUnionPayment()
    {
        return $this->container['minimum_western_union_payment'];
    }

    /**
     * Sets minimum_western_union_payment
     *
     * @param float|null $minimum_western_union_payment minimum_western_union_payment
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setMinimumWesternUnionPayment($minimum_western_union_payment)
    {
        $this->container['minimum_western_union_payment'] = $minimum_western_union_payment;

        return $this;
    }

    /**
     * Gets pay_methods
     *
     * @return string[]|null
     */
    #[\ReturnTypeWillChange]
    public function getPayMethods()
    {
        return $this->container['pay_methods'];
    }

    /**
     * Sets pay_methods
     *
     * @param string[]|null $pay_methods pay_methods
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setPayMethods($pay_methods)
    {
        $this->container['pay_methods'] = $pay_methods;

        return $this;
    }

    /**
     * Gets payment_methods
     *
     * @return \Openprovider\Api\Rest\Client\Person\Model\SettingsPaymentMethods[]|null
     */
    #[\ReturnTypeWillChange]
    public function getPaymentMethods()
    {
        return $this->container['payment_methods'];
    }

    /**
     * Sets payment_methods
     *
     * @param \Openprovider\Api\Rest\Client\Person\Model\SettingsPaymentMethods[]|null $payment_methods payment_methods
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setPaymentMethods($payment_methods)
    {
        $this->container['payment_methods'] = $payment_methods;

        return $this;
    }

    /**
     * Gets preregistered_domain_priorities
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getPreregisteredDomainPriorities()
    {
        return $this->container['preregistered_domain_priorities'];
    }

    /**
     * Sets preregistered_domain_priorities
     *
     * @param string|null $preregistered_domain_priorities preregistered_domain_priorities
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setPreregisteredDomainPriorities($preregistered_domain_priorities)
    {
        $this->container['preregistered_domain_priorities'] = $preregistered_domain_priorities;

        return $this;
    }

    /**
     * Gets recurring_payment_methods
     *
     * @return \Openprovider\Api\Rest\Client\Person\Model\SettingsPaymentMethods[]|null
     */
    #[\ReturnTypeWillChange]
    public function getRecurringPaymentMethods()
    {
        return $this->container['recurring_payment_methods'];
    }

    /**
     * Sets recurring_payment_methods
     *
     * @param \Openprovider\Api\Rest\Client\Person\Model\SettingsPaymentMethods[]|null $recurring_payment_methods recurring_payment_methods
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setRecurringPaymentMethods($recurring_payment_methods)
    {
        $this->container['recurring_payment_methods'] = $recurring_payment_methods;

        return $this;
    }

    /**
     * Gets renew_notification_days
     *
     * @return int[]|null
     */
    #[\ReturnTypeWillChange]
    public function getRenewNotificationDays()
    {
        return $this->container['renew_notification_days'];
    }

    /**
     * Sets renew_notification_days
     *
     * @param int[]|null $renew_notification_days renew_notification_days
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setRenewNotificationDays($renew_notification_days)
    {
        $this->container['renew_notification_days'] = $renew_notification_days;

        return $this;
    }

    /**
     * Gets renew_notification_every_week
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getRenewNotificationEveryWeek()
    {
        return $this->container['renew_notification_every_week'];
    }

    /**
     * Sets renew_notification_every_week
     *
     * @param bool|null $renew_notification_every_week renew_notification_every_week
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setRenewNotificationEveryWeek($renew_notification_every_week)
    {
        $this->container['renew_notification_every_week'] = $renew_notification_every_week;

        return $this;
    }

    /**
     * Gets tac_contract
     *
     * @return \Openprovider\Api\Rest\Client\Person\Model\SettingsTacContract|null
     */
    #[\ReturnTypeWillChange]
    public function getTacContract()
    {
        return $this->container['tac_contract'];
    }

    /**
     * Sets tac_contract
     *
     * @param \Openprovider\Api\Rest\Client\Person\Model\SettingsTacContract|null $tac_contract tac_contract
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setTacContract($tac_contract)
    {
        $this->container['tac_contract'] = $tac_contract;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    #[\ReturnTypeWillChange]
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets transaction_fee
     *
     * @return \Openprovider\Api\Rest\Client\Person\Model\SettingsTransactionFee|null
     */
    #[\ReturnTypeWillChange]
    public function getTransactionFee()
    {
        return $this->container['transaction_fee'];
    }

    /**
     * Sets transaction_fee
     *
     * @param \Openprovider\Api\Rest\Client\Person\Model\SettingsTransactionFee|null $transaction_fee transaction_fee
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setTransactionFee($transaction_fee)
    {
        $this->container['transaction_fee'] = $transaction_fee;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    #[\ReturnTypeWillChange]
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


