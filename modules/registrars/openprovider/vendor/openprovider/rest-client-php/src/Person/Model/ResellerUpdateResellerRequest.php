<?php
/**
 * ResellerUpdateResellerRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Openprovider\Api\Rest\Client\Person
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Reseller/Customer
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Openprovider\Api\Rest\Client\Person\Model;

use \ArrayAccess;
use Openprovider\Api\Rest\Client\Base\ObjectSerializer;
use Openprovider\Api\Rest\Client\Base\ModelInterface;

/**
 * ResellerUpdateResellerRequest Class Doc Comment
 *
 * @category Class
 * @package  Openprovider\Api\Rest\Client\Person
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ResellerUpdateResellerRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'resellerUpdateResellerRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'additional_data' => '\Openprovider\Api\Rest\Client\Person\Model\ResellerResellerAdditionalData',
        'address' => '\Openprovider\Api\Rest\Client\Person\Model\ContactAddress',
        'comments' => 'string',
        'company_name' => 'string',
        'company_size' => '\Openprovider\Api\Rest\Client\Person\Model\AttributesCompanySize',
        'fax' => '\Openprovider\Api\Rest\Client\Person\Model\CustomerFax',
        'id' => 'int',
        'industry' => '\Openprovider\Api\Rest\Client\Person\Model\AttributesIndustry',
        'inn' => 'string',
        'kpp' => 'string',
        'locale' => 'string',
        'name' => '\Openprovider\Api\Rest\Client\Person\Model\ContactName',
        'phone' => '\Openprovider\Api\Rest\Client\Person\Model\ContactPhone',
        'vat' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'additional_data' => null,
        'address' => null,
        'comments' => null,
        'company_name' => null,
        'company_size' => null,
        'fax' => null,
        'id' => 'int32',
        'industry' => null,
        'inn' => null,
        'kpp' => null,
        'locale' => null,
        'name' => null,
        'phone' => null,
        'vat' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_data' => 'additional_data',
        'address' => 'address',
        'comments' => 'comments',
        'company_name' => 'company_name',
        'company_size' => 'company_size',
        'fax' => 'fax',
        'id' => 'id',
        'industry' => 'industry',
        'inn' => 'inn',
        'kpp' => 'kpp',
        'locale' => 'locale',
        'name' => 'name',
        'phone' => 'phone',
        'vat' => 'vat'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_data' => 'setAdditionalData',
        'address' => 'setAddress',
        'comments' => 'setComments',
        'company_name' => 'setCompanyName',
        'company_size' => 'setCompanySize',
        'fax' => 'setFax',
        'id' => 'setId',
        'industry' => 'setIndustry',
        'inn' => 'setInn',
        'kpp' => 'setKpp',
        'locale' => 'setLocale',
        'name' => 'setName',
        'phone' => 'setPhone',
        'vat' => 'setVat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_data' => 'getAdditionalData',
        'address' => 'getAddress',
        'comments' => 'getComments',
        'company_name' => 'getCompanyName',
        'company_size' => 'getCompanySize',
        'fax' => 'getFax',
        'id' => 'getId',
        'industry' => 'getIndustry',
        'inn' => 'getInn',
        'kpp' => 'getKpp',
        'locale' => 'getLocale',
        'name' => 'getName',
        'phone' => 'getPhone',
        'vat' => 'getVat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    #[\ReturnTypeWillChange]
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additional_data'] = isset($data['additional_data']) ? $data['additional_data'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['company_size'] = isset($data['company_size']) ? $data['company_size'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['industry'] = isset($data['industry']) ? $data['industry'] : null;
        $this->container['inn'] = isset($data['inn']) ? $data['inn'] : null;
        $this->container['kpp'] = isset($data['kpp']) ? $data['kpp'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    #[\ReturnTypeWillChange]
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    #[\ReturnTypeWillChange]
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additional_data
     *
     * @return \Openprovider\Api\Rest\Client\Person\Model\ResellerResellerAdditionalData|null
     */
    #[\ReturnTypeWillChange]
    public function getAdditionalData()
    {
        return $this->container['additional_data'];
    }

    /**
     * Sets additional_data
     *
     * @param \Openprovider\Api\Rest\Client\Person\Model\ResellerResellerAdditionalData|null $additional_data additional_data
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setAdditionalData($additional_data)
    {
        $this->container['additional_data'] = $additional_data;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Openprovider\Api\Rest\Client\Person\Model\ContactAddress|null
     */
    #[\ReturnTypeWillChange]
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Openprovider\Api\Rest\Client\Person\Model\ContactAddress|null $address address
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments comments
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name company_name
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets company_size
     *
     * @return \Openprovider\Api\Rest\Client\Person\Model\AttributesCompanySize|null
     */
    #[\ReturnTypeWillChange]
    public function getCompanySize()
    {
        return $this->container['company_size'];
    }

    /**
     * Sets company_size
     *
     * @param \Openprovider\Api\Rest\Client\Person\Model\AttributesCompanySize|null $company_size company_size
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setCompanySize($company_size)
    {
        $this->container['company_size'] = $company_size;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return \Openprovider\Api\Rest\Client\Person\Model\CustomerFax|null
     */
    #[\ReturnTypeWillChange]
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param \Openprovider\Api\Rest\Client\Person\Model\CustomerFax|null $fax fax
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setFax($fax)
    {
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    #[\ReturnTypeWillChange]
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets industry
     *
     * @return \Openprovider\Api\Rest\Client\Person\Model\AttributesIndustry|null
     */
    #[\ReturnTypeWillChange]
    public function getIndustry()
    {
        return $this->container['industry'];
    }

    /**
     * Sets industry
     *
     * @param \Openprovider\Api\Rest\Client\Person\Model\AttributesIndustry|null $industry industry
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIndustry($industry)
    {
        $this->container['industry'] = $industry;

        return $this;
    }

    /**
     * Gets inn
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getInn()
    {
        return $this->container['inn'];
    }

    /**
     * Sets inn
     *
     * @param string|null $inn inn
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setInn($inn)
    {
        $this->container['inn'] = $inn;

        return $this;
    }

    /**
     * Gets kpp
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getKpp()
    {
        return $this->container['kpp'];
    }

    /**
     * Sets kpp
     *
     * @param string|null $kpp kpp
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setKpp($kpp)
    {
        $this->container['kpp'] = $kpp;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale locale
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \Openprovider\Api\Rest\Client\Person\Model\ContactName|null
     */
    #[\ReturnTypeWillChange]
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \Openprovider\Api\Rest\Client\Person\Model\ContactName|null $name name
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return \Openprovider\Api\Rest\Client\Person\Model\ContactPhone|null
     */
    #[\ReturnTypeWillChange]
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param \Openprovider\Api\Rest\Client\Person\Model\ContactPhone|null $phone phone
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param string|null $vat vat
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    #[\ReturnTypeWillChange]
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


