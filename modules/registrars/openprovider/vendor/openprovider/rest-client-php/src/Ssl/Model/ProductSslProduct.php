<?php
/**
 * ProductSslProduct
 *
 * PHP version 5
 *
 * @category Class
 * @package  Openprovider\Api\Rest\Client\Ssl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SSL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Openprovider\Api\Rest\Client\Ssl\Model;

use \ArrayAccess;
use Openprovider\Api\Rest\Client\Base\ObjectSerializer;
use Openprovider\Api\Rest\Client\Base\ModelInterface;

/**
 * ProductSslProduct Class Doc Comment
 *
 * @category Class
 * @package  Openprovider\Api\Rest\Client\Ssl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductSslProduct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'productSslProduct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'brand_name' => 'string',
        'bypass_san' => 'bool',
        'category' => 'string',
        'delivery_time' => 'string',
        'description' => 'string',
        'encryption' => 'string',
        'free_refund_period' => 'string',
        'free_reissue_period' => 'string',
        'id' => 'int',
        'included_domains_count' => 'int',
        'is_extended_validation_supported' => 'bool',
        'is_idn_supported' => 'bool',
        'is_mobile_supported' => 'bool',
        'is_sgc_supported' => 'bool',
        'is_wildcard_multidomain_supported' => 'bool',
        'is_wildcard_supported' => 'bool',
        'level_prices' => '\Openprovider\Api\Rest\Client\Ssl\Model\ProductSslProductLevelPrices[]',
        'max_domains' => 'int',
        'max_period' => 'int',
        'name' => 'string',
        'number_of_domains' => 'int',
        'order_module' => 'string',
        'prices' => '\Openprovider\Api\Rest\Client\Ssl\Model\ProductSslProductPrices[]',
        'root' => 'string',
        'sub_category' => 'string',
        'supported_software' => '\Openprovider\Api\Rest\Client\Ssl\Model\ProductSslProductSupportedSoftware[]',
        'validation_method' => 'string',
        'warranty' => '\Openprovider\Api\Rest\Client\Ssl\Model\ProductSslProductWarranty'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'brand_name' => null,
        'bypass_san' => 'boolean',
        'category' => null,
        'delivery_time' => null,
        'description' => null,
        'encryption' => null,
        'free_refund_period' => null,
        'free_reissue_period' => null,
        'id' => 'int32',
        'included_domains_count' => 'int32',
        'is_extended_validation_supported' => 'boolean',
        'is_idn_supported' => 'boolean',
        'is_mobile_supported' => 'boolean',
        'is_sgc_supported' => 'boolean',
        'is_wildcard_multidomain_supported' => 'boolean',
        'is_wildcard_supported' => 'boolean',
        'level_prices' => null,
        'max_domains' => 'int32',
        'max_period' => 'int32',
        'name' => null,
        'number_of_domains' => 'int32',
        'order_module' => null,
        'prices' => null,
        'root' => null,
        'sub_category' => null,
        'supported_software' => null,
        'validation_method' => null,
        'warranty' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'brand_name' => 'brand_name',
        'bypass_san' => 'bypass_san',
        'category' => 'category',
        'delivery_time' => 'delivery_time',
        'description' => 'description',
        'encryption' => 'encryption',
        'free_refund_period' => 'free_refund_period',
        'free_reissue_period' => 'free_reissue_period',
        'id' => 'id',
        'included_domains_count' => 'included_domains_count',
        'is_extended_validation_supported' => 'is_extended_validation_supported',
        'is_idn_supported' => 'is_idn_supported',
        'is_mobile_supported' => 'is_mobile_supported',
        'is_sgc_supported' => 'is_sgc_supported',
        'is_wildcard_multidomain_supported' => 'is_wildcard_multidomain_supported',
        'is_wildcard_supported' => 'is_wildcard_supported',
        'level_prices' => 'level_prices',
        'max_domains' => 'max_domains',
        'max_period' => 'max_period',
        'name' => 'name',
        'number_of_domains' => 'number_of_domains',
        'order_module' => 'order_module',
        'prices' => 'prices',
        'root' => 'root',
        'sub_category' => 'sub_category',
        'supported_software' => 'supported_software',
        'validation_method' => 'validation_method',
        'warranty' => 'warranty'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'brand_name' => 'setBrandName',
        'bypass_san' => 'setBypassSan',
        'category' => 'setCategory',
        'delivery_time' => 'setDeliveryTime',
        'description' => 'setDescription',
        'encryption' => 'setEncryption',
        'free_refund_period' => 'setFreeRefundPeriod',
        'free_reissue_period' => 'setFreeReissuePeriod',
        'id' => 'setId',
        'included_domains_count' => 'setIncludedDomainsCount',
        'is_extended_validation_supported' => 'setIsExtendedValidationSupported',
        'is_idn_supported' => 'setIsIdnSupported',
        'is_mobile_supported' => 'setIsMobileSupported',
        'is_sgc_supported' => 'setIsSgcSupported',
        'is_wildcard_multidomain_supported' => 'setIsWildcardMultidomainSupported',
        'is_wildcard_supported' => 'setIsWildcardSupported',
        'level_prices' => 'setLevelPrices',
        'max_domains' => 'setMaxDomains',
        'max_period' => 'setMaxPeriod',
        'name' => 'setName',
        'number_of_domains' => 'setNumberOfDomains',
        'order_module' => 'setOrderModule',
        'prices' => 'setPrices',
        'root' => 'setRoot',
        'sub_category' => 'setSubCategory',
        'supported_software' => 'setSupportedSoftware',
        'validation_method' => 'setValidationMethod',
        'warranty' => 'setWarranty'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'brand_name' => 'getBrandName',
        'bypass_san' => 'getBypassSan',
        'category' => 'getCategory',
        'delivery_time' => 'getDeliveryTime',
        'description' => 'getDescription',
        'encryption' => 'getEncryption',
        'free_refund_period' => 'getFreeRefundPeriod',
        'free_reissue_period' => 'getFreeReissuePeriod',
        'id' => 'getId',
        'included_domains_count' => 'getIncludedDomainsCount',
        'is_extended_validation_supported' => 'getIsExtendedValidationSupported',
        'is_idn_supported' => 'getIsIdnSupported',
        'is_mobile_supported' => 'getIsMobileSupported',
        'is_sgc_supported' => 'getIsSgcSupported',
        'is_wildcard_multidomain_supported' => 'getIsWildcardMultidomainSupported',
        'is_wildcard_supported' => 'getIsWildcardSupported',
        'level_prices' => 'getLevelPrices',
        'max_domains' => 'getMaxDomains',
        'max_period' => 'getMaxPeriod',
        'name' => 'getName',
        'number_of_domains' => 'getNumberOfDomains',
        'order_module' => 'getOrderModule',
        'prices' => 'getPrices',
        'root' => 'getRoot',
        'sub_category' => 'getSubCategory',
        'supported_software' => 'getSupportedSoftware',
        'validation_method' => 'getValidationMethod',
        'warranty' => 'getWarranty'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    #[\ReturnTypeWillChange]
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['brand_name'] = isset($data['brand_name']) ? $data['brand_name'] : null;
        $this->container['bypass_san'] = isset($data['bypass_san']) ? $data['bypass_san'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['delivery_time'] = isset($data['delivery_time']) ? $data['delivery_time'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['encryption'] = isset($data['encryption']) ? $data['encryption'] : null;
        $this->container['free_refund_period'] = isset($data['free_refund_period']) ? $data['free_refund_period'] : null;
        $this->container['free_reissue_period'] = isset($data['free_reissue_period']) ? $data['free_reissue_period'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['included_domains_count'] = isset($data['included_domains_count']) ? $data['included_domains_count'] : null;
        $this->container['is_extended_validation_supported'] = isset($data['is_extended_validation_supported']) ? $data['is_extended_validation_supported'] : null;
        $this->container['is_idn_supported'] = isset($data['is_idn_supported']) ? $data['is_idn_supported'] : null;
        $this->container['is_mobile_supported'] = isset($data['is_mobile_supported']) ? $data['is_mobile_supported'] : null;
        $this->container['is_sgc_supported'] = isset($data['is_sgc_supported']) ? $data['is_sgc_supported'] : null;
        $this->container['is_wildcard_multidomain_supported'] = isset($data['is_wildcard_multidomain_supported']) ? $data['is_wildcard_multidomain_supported'] : null;
        $this->container['is_wildcard_supported'] = isset($data['is_wildcard_supported']) ? $data['is_wildcard_supported'] : null;
        $this->container['level_prices'] = isset($data['level_prices']) ? $data['level_prices'] : null;
        $this->container['max_domains'] = isset($data['max_domains']) ? $data['max_domains'] : null;
        $this->container['max_period'] = isset($data['max_period']) ? $data['max_period'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['number_of_domains'] = isset($data['number_of_domains']) ? $data['number_of_domains'] : null;
        $this->container['order_module'] = isset($data['order_module']) ? $data['order_module'] : null;
        $this->container['prices'] = isset($data['prices']) ? $data['prices'] : null;
        $this->container['root'] = isset($data['root']) ? $data['root'] : null;
        $this->container['sub_category'] = isset($data['sub_category']) ? $data['sub_category'] : null;
        $this->container['supported_software'] = isset($data['supported_software']) ? $data['supported_software'] : null;
        $this->container['validation_method'] = isset($data['validation_method']) ? $data['validation_method'] : null;
        $this->container['warranty'] = isset($data['warranty']) ? $data['warranty'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    #[\ReturnTypeWillChange]
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    #[\ReturnTypeWillChange]
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets brand_name
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getBrandName()
    {
        return $this->container['brand_name'];
    }

    /**
     * Sets brand_name
     *
     * @param string|null $brand_name brand_name
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setBrandName($brand_name)
    {
        $this->container['brand_name'] = $brand_name;

        return $this;
    }

    /**
     * Gets bypass_san
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getBypassSan()
    {
        return $this->container['bypass_san'];
    }

    /**
     * Sets bypass_san
     *
     * @param bool|null $bypass_san bypass_san
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setBypassSan($bypass_san)
    {
        $this->container['bypass_san'] = $bypass_san;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category category
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets delivery_time
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getDeliveryTime()
    {
        return $this->container['delivery_time'];
    }

    /**
     * Sets delivery_time
     *
     * @param string|null $delivery_time Average period of time between order creation and completion.
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setDeliveryTime($delivery_time)
    {
        $this->container['delivery_time'] = $delivery_time;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets encryption
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getEncryption()
    {
        return $this->container['encryption'];
    }

    /**
     * Sets encryption
     *
     * @param string|null $encryption encryption
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setEncryption($encryption)
    {
        $this->container['encryption'] = $encryption;

        return $this;
    }

    /**
     * Gets free_refund_period
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getFreeRefundPeriod()
    {
        return $this->container['free_refund_period'];
    }

    /**
     * Sets free_refund_period
     *
     * @param string|null $free_refund_period free_refund_period
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setFreeRefundPeriod($free_refund_period)
    {
        $this->container['free_refund_period'] = $free_refund_period;

        return $this;
    }

    /**
     * Gets free_reissue_period
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getFreeReissuePeriod()
    {
        return $this->container['free_reissue_period'];
    }

    /**
     * Sets free_reissue_period
     *
     * @param string|null $free_reissue_period free_reissue_period
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setFreeReissuePeriod($free_reissue_period)
    {
        $this->container['free_reissue_period'] = $free_reissue_period;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    #[\ReturnTypeWillChange]
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets included_domains_count
     *
     * @return int|null
     */
    #[\ReturnTypeWillChange]
    public function getIncludedDomainsCount()
    {
        return $this->container['included_domains_count'];
    }

    /**
     * Sets included_domains_count
     *
     * @param int|null $included_domains_count included_domains_count
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIncludedDomainsCount($included_domains_count)
    {
        $this->container['included_domains_count'] = $included_domains_count;

        return $this;
    }

    /**
     * Gets is_extended_validation_supported
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getIsExtendedValidationSupported()
    {
        return $this->container['is_extended_validation_supported'];
    }

    /**
     * Sets is_extended_validation_supported
     *
     * @param bool|null $is_extended_validation_supported is_extended_validation_supported
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsExtendedValidationSupported($is_extended_validation_supported)
    {
        $this->container['is_extended_validation_supported'] = $is_extended_validation_supported;

        return $this;
    }

    /**
     * Gets is_idn_supported
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getIsIdnSupported()
    {
        return $this->container['is_idn_supported'];
    }

    /**
     * Sets is_idn_supported
     *
     * @param bool|null $is_idn_supported is_idn_supported
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsIdnSupported($is_idn_supported)
    {
        $this->container['is_idn_supported'] = $is_idn_supported;

        return $this;
    }

    /**
     * Gets is_mobile_supported
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getIsMobileSupported()
    {
        return $this->container['is_mobile_supported'];
    }

    /**
     * Sets is_mobile_supported
     *
     * @param bool|null $is_mobile_supported is_mobile_supported
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsMobileSupported($is_mobile_supported)
    {
        $this->container['is_mobile_supported'] = $is_mobile_supported;

        return $this;
    }

    /**
     * Gets is_sgc_supported
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getIsSgcSupported()
    {
        return $this->container['is_sgc_supported'];
    }

    /**
     * Sets is_sgc_supported
     *
     * @param bool|null $is_sgc_supported is_sgc_supported
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsSgcSupported($is_sgc_supported)
    {
        $this->container['is_sgc_supported'] = $is_sgc_supported;

        return $this;
    }

    /**
     * Gets is_wildcard_multidomain_supported
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getIsWildcardMultidomainSupported()
    {
        return $this->container['is_wildcard_multidomain_supported'];
    }

    /**
     * Sets is_wildcard_multidomain_supported
     *
     * @param bool|null $is_wildcard_multidomain_supported is_wildcard_multidomain_supported
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsWildcardMultidomainSupported($is_wildcard_multidomain_supported)
    {
        $this->container['is_wildcard_multidomain_supported'] = $is_wildcard_multidomain_supported;

        return $this;
    }

    /**
     * Gets is_wildcard_supported
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getIsWildcardSupported()
    {
        return $this->container['is_wildcard_supported'];
    }

    /**
     * Sets is_wildcard_supported
     *
     * @param bool|null $is_wildcard_supported is_wildcard_supported
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsWildcardSupported($is_wildcard_supported)
    {
        $this->container['is_wildcard_supported'] = $is_wildcard_supported;

        return $this;
    }

    /**
     * Gets level_prices
     *
     * @return \Openprovider\Api\Rest\Client\Ssl\Model\ProductSslProductLevelPrices[]|null
     */
    #[\ReturnTypeWillChange]
    public function getLevelPrices()
    {
        return $this->container['level_prices'];
    }

    /**
     * Sets level_prices
     *
     * @param \Openprovider\Api\Rest\Client\Ssl\Model\ProductSslProductLevelPrices[]|null $level_prices level_prices
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setLevelPrices($level_prices)
    {
        $this->container['level_prices'] = $level_prices;

        return $this;
    }

    /**
     * Gets max_domains
     *
     * @return int|null
     */
    #[\ReturnTypeWillChange]
    public function getMaxDomains()
    {
        return $this->container['max_domains'];
    }

    /**
     * Sets max_domains
     *
     * @param int|null $max_domains Applies only to multi-domain certificates.
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setMaxDomains($max_domains)
    {
        $this->container['max_domains'] = $max_domains;

        return $this;
    }

    /**
     * Gets max_period
     *
     * @return int|null
     */
    #[\ReturnTypeWillChange]
    public function getMaxPeriod()
    {
        return $this->container['max_period'];
    }

    /**
     * Sets max_period
     *
     * @param int|null $max_period max_period
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setMaxPeriod($max_period)
    {
        $this->container['max_period'] = $max_period;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets number_of_domains
     *
     * @return int|null
     */
    #[\ReturnTypeWillChange]
    public function getNumberOfDomains()
    {
        return $this->container['number_of_domains'];
    }

    /**
     * Sets number_of_domains
     *
     * @param int|null $number_of_domains number_of_domains
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setNumberOfDomains($number_of_domains)
    {
        $this->container['number_of_domains'] = $number_of_domains;

        return $this;
    }

    /**
     * Gets order_module
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getOrderModule()
    {
        return $this->container['order_module'];
    }

    /**
     * Sets order_module
     *
     * @param string|null $order_module order_module
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setOrderModule($order_module)
    {
        $this->container['order_module'] = $order_module;

        return $this;
    }

    /**
     * Gets prices
     *
     * @return \Openprovider\Api\Rest\Client\Ssl\Model\ProductSslProductPrices[]|null
     */
    #[\ReturnTypeWillChange]
    public function getPrices()
    {
        return $this->container['prices'];
    }

    /**
     * Sets prices
     *
     * @param \Openprovider\Api\Rest\Client\Ssl\Model\ProductSslProductPrices[]|null $prices prices
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setPrices($prices)
    {
        $this->container['prices'] = $prices;

        return $this;
    }

    /**
     * Gets root
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getRoot()
    {
        return $this->container['root'];
    }

    /**
     * Sets root
     *
     * @param string|null $root root
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setRoot($root)
    {
        $this->container['root'] = $root;

        return $this;
    }

    /**
     * Gets sub_category
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getSubCategory()
    {
        return $this->container['sub_category'];
    }

    /**
     * Sets sub_category
     *
     * @param string|null $sub_category sub_category
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setSubCategory($sub_category)
    {
        $this->container['sub_category'] = $sub_category;

        return $this;
    }

    /**
     * Gets supported_software
     *
     * @return \Openprovider\Api\Rest\Client\Ssl\Model\ProductSslProductSupportedSoftware[]|null
     */
    #[\ReturnTypeWillChange]
    public function getSupportedSoftware()
    {
        return $this->container['supported_software'];
    }

    /**
     * Sets supported_software
     *
     * @param \Openprovider\Api\Rest\Client\Ssl\Model\ProductSslProductSupportedSoftware[]|null $supported_software supported_software
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setSupportedSoftware($supported_software)
    {
        $this->container['supported_software'] = $supported_software;

        return $this;
    }

    /**
     * Gets validation_method
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getValidationMethod()
    {
        return $this->container['validation_method'];
    }

    /**
     * Sets validation_method
     *
     * @param string|null $validation_method validation_method
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setValidationMethod($validation_method)
    {
        $this->container['validation_method'] = $validation_method;

        return $this;
    }

    /**
     * Gets warranty
     *
     * @return \Openprovider\Api\Rest\Client\Ssl\Model\ProductSslProductWarranty|null
     */
    #[\ReturnTypeWillChange]
    public function getWarranty()
    {
        return $this->container['warranty'];
    }

    /**
     * Sets warranty
     *
     * @param \Openprovider\Api\Rest\Client\Ssl\Model\ProductSslProductWarranty|null $warranty warranty
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setWarranty($warranty)
    {
        $this->container['warranty'] = $warranty;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    #[\ReturnTypeWillChange]
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


