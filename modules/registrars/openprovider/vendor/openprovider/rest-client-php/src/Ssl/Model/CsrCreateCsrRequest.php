<?php
/**
 * CsrCreateCsrRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Openprovider\Api\Rest\Client\Ssl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SSL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Openprovider\Api\Rest\Client\Ssl\Model;

use \ArrayAccess;
use Openprovider\Api\Rest\Client\Base\ObjectSerializer;
use Openprovider\Api\Rest\Client\Base\ModelInterface;

/**
 * CsrCreateCsrRequest Class Doc Comment
 *
 * @category Class
 * @package  Openprovider\Api\Rest\Client\Ssl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CsrCreateCsrRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'csrCreateCsrRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bits' => 'int',
        'common_name' => 'string',
        'country' => 'string',
        'email' => 'string',
        'locality' => 'string',
        'organization' => 'string',
        'signature_hash_algorithm' => 'string',
        'state' => 'string',
        'subject_alternative_name' => 'string[]',
        'unit' => 'string',
        'with_config' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'bits' => 'int32',
        'common_name' => null,
        'country' => null,
        'email' => null,
        'locality' => null,
        'organization' => null,
        'signature_hash_algorithm' => null,
        'state' => null,
        'subject_alternative_name' => null,
        'unit' => null,
        'with_config' => 'boolean'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bits' => 'bits',
        'common_name' => 'common_name',
        'country' => 'country',
        'email' => 'email',
        'locality' => 'locality',
        'organization' => 'organization',
        'signature_hash_algorithm' => 'signature_hash_algorithm',
        'state' => 'state',
        'subject_alternative_name' => 'subject_alternative_name',
        'unit' => 'unit',
        'with_config' => 'with_config'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bits' => 'setBits',
        'common_name' => 'setCommonName',
        'country' => 'setCountry',
        'email' => 'setEmail',
        'locality' => 'setLocality',
        'organization' => 'setOrganization',
        'signature_hash_algorithm' => 'setSignatureHashAlgorithm',
        'state' => 'setState',
        'subject_alternative_name' => 'setSubjectAlternativeName',
        'unit' => 'setUnit',
        'with_config' => 'setWithConfig'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bits' => 'getBits',
        'common_name' => 'getCommonName',
        'country' => 'getCountry',
        'email' => 'getEmail',
        'locality' => 'getLocality',
        'organization' => 'getOrganization',
        'signature_hash_algorithm' => 'getSignatureHashAlgorithm',
        'state' => 'getState',
        'subject_alternative_name' => 'getSubjectAlternativeName',
        'unit' => 'getUnit',
        'with_config' => 'getWithConfig'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    #[\ReturnTypeWillChange]
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bits'] = isset($data['bits']) ? $data['bits'] : null;
        $this->container['common_name'] = isset($data['common_name']) ? $data['common_name'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['locality'] = isset($data['locality']) ? $data['locality'] : null;
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['signature_hash_algorithm'] = isset($data['signature_hash_algorithm']) ? $data['signature_hash_algorithm'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['subject_alternative_name'] = isset($data['subject_alternative_name']) ? $data['subject_alternative_name'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['with_config'] = isset($data['with_config']) ? $data['with_config'] : true;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    #[\ReturnTypeWillChange]
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    #[\ReturnTypeWillChange]
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bits
     *
     * @return int|null
     */
    #[\ReturnTypeWillChange]
    public function getBits()
    {
        return $this->container['bits'];
    }

    /**
     * Sets bits
     *
     * @param int|null $bits bits
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setBits($bits)
    {
        $this->container['bits'] = $bits;

        return $this;
    }

    /**
     * Gets common_name
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getCommonName()
    {
        return $this->container['common_name'];
    }

    /**
     * Sets common_name
     *
     * @param string|null $common_name common_name
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setCommonName($common_name)
    {
        $this->container['common_name'] = $common_name;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets locality
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getLocality()
    {
        return $this->container['locality'];
    }

    /**
     * Sets locality
     *
     * @param string|null $locality locality
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setLocality($locality)
    {
        $this->container['locality'] = $locality;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param string|null $organization organization
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets signature_hash_algorithm
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getSignatureHashAlgorithm()
    {
        return $this->container['signature_hash_algorithm'];
    }

    /**
     * Sets signature_hash_algorithm
     *
     * @param string|null $signature_hash_algorithm Redundant field, can be used as 'sha2'.
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setSignatureHashAlgorithm($signature_hash_algorithm)
    {
        $this->container['signature_hash_algorithm'] = $signature_hash_algorithm;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets subject_alternative_name
     *
     * @return string[]|null
     */
    #[\ReturnTypeWillChange]
    public function getSubjectAlternativeName()
    {
        return $this->container['subject_alternative_name'];
    }

    /**
     * Sets subject_alternative_name
     *
     * @param string[]|null $subject_alternative_name subject_alternative_name
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setSubjectAlternativeName($subject_alternative_name)
    {
        $this->container['subject_alternative_name'] = $subject_alternative_name;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit unit
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets with_config
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getWithConfig()
    {
        return $this->container['with_config'];
    }

    /**
     * Sets with_config
     *
     * @param bool|null $with_config with_config
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setWithConfig($with_config)
    {
        $this->container['with_config'] = $with_config;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    #[\ReturnTypeWillChange]
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


