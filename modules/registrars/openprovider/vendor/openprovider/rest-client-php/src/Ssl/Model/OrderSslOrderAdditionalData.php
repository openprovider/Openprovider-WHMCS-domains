<?php
/**
 * OrderSslOrderAdditionalData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Openprovider\Api\Rest\Client\Ssl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SSL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Openprovider\Api\Rest\Client\Ssl\Model;

use \ArrayAccess;
use Openprovider\Api\Rest\Client\Base\ObjectSerializer;
use Openprovider\Api\Rest\Client\Base\ModelInterface;

/**
 * OrderSslOrderAdditionalData Class Doc Comment
 *
 * @category Class
 * @package  Openprovider\Api\Rest\Client\Ssl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderSslOrderAdditionalData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orderSslOrderAdditionalData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dns' => 'string',
        'dns_record' => 'string',
        'dns_value' => 'string',
        'domain' => 'string',
        'file_content' => 'string',
        'file_contents' => 'string',
        'file_location' => 'string',
        'file_name' => 'string',
        'md5' => 'string',
        'old_cert_format' => 'string[]',
        'sha1' => 'string',
        'sha256' => 'string',
        'token' => 'string',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'dns' => null,
        'dns_record' => null,
        'dns_value' => null,
        'domain' => null,
        'file_content' => null,
        'file_contents' => null,
        'file_location' => null,
        'file_name' => null,
        'md5' => null,
        'old_cert_format' => null,
        'sha1' => null,
        'sha256' => null,
        'token' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dns' => 'dns',
        'dns_record' => 'dns_record',
        'dns_value' => 'dns_value',
        'domain' => 'domain',
        'file_content' => 'file_content',
        'file_contents' => 'file_contents',
        'file_location' => 'file_location',
        'file_name' => 'file_name',
        'md5' => 'md5',
        'old_cert_format' => 'old_cert_format',
        'sha1' => 'sha1',
        'sha256' => 'sha256',
        'token' => 'token',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dns' => 'setDns',
        'dns_record' => 'setDnsRecord',
        'dns_value' => 'setDnsValue',
        'domain' => 'setDomain',
        'file_content' => 'setFileContent',
        'file_contents' => 'setFileContents',
        'file_location' => 'setFileLocation',
        'file_name' => 'setFileName',
        'md5' => 'setMd5',
        'old_cert_format' => 'setOldCertFormat',
        'sha1' => 'setSha1',
        'sha256' => 'setSha256',
        'token' => 'setToken',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dns' => 'getDns',
        'dns_record' => 'getDnsRecord',
        'dns_value' => 'getDnsValue',
        'domain' => 'getDomain',
        'file_content' => 'getFileContent',
        'file_contents' => 'getFileContents',
        'file_location' => 'getFileLocation',
        'file_name' => 'getFileName',
        'md5' => 'getMd5',
        'old_cert_format' => 'getOldCertFormat',
        'sha1' => 'getSha1',
        'sha256' => 'getSha256',
        'token' => 'getToken',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    #[\ReturnTypeWillChange]
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dns'] = isset($data['dns']) ? $data['dns'] : null;
        $this->container['dns_record'] = isset($data['dns_record']) ? $data['dns_record'] : null;
        $this->container['dns_value'] = isset($data['dns_value']) ? $data['dns_value'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['file_content'] = isset($data['file_content']) ? $data['file_content'] : null;
        $this->container['file_contents'] = isset($data['file_contents']) ? $data['file_contents'] : null;
        $this->container['file_location'] = isset($data['file_location']) ? $data['file_location'] : null;
        $this->container['file_name'] = isset($data['file_name']) ? $data['file_name'] : null;
        $this->container['md5'] = isset($data['md5']) ? $data['md5'] : null;
        $this->container['old_cert_format'] = isset($data['old_cert_format']) ? $data['old_cert_format'] : null;
        $this->container['sha1'] = isset($data['sha1']) ? $data['sha1'] : null;
        $this->container['sha256'] = isset($data['sha256']) ? $data['sha256'] : null;
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    #[\ReturnTypeWillChange]
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    #[\ReturnTypeWillChange]
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dns
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getDns()
    {
        return $this->container['dns'];
    }

    /**
     * Sets dns
     *
     * @param string|null $dns dns
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setDns($dns)
    {
        $this->container['dns'] = $dns;

        return $this;
    }

    /**
     * Gets dns_record
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getDnsRecord()
    {
        return $this->container['dns_record'];
    }

    /**
     * Sets dns_record
     *
     * @param string|null $dns_record dns_record
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setDnsRecord($dns_record)
    {
        $this->container['dns_record'] = $dns_record;

        return $this;
    }

    /**
     * Gets dns_value
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getDnsValue()
    {
        return $this->container['dns_value'];
    }

    /**
     * Sets dns_value
     *
     * @param string|null $dns_value dns_value
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setDnsValue($dns_value)
    {
        $this->container['dns_value'] = $dns_value;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain domain
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets file_content
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getFileContent()
    {
        return $this->container['file_content'];
    }

    /**
     * Sets file_content
     *
     * @param string|null $file_content file_content
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setFileContent($file_content)
    {
        $this->container['file_content'] = $file_content;

        return $this;
    }

    /**
     * Gets file_contents
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getFileContents()
    {
        return $this->container['file_contents'];
    }

    /**
     * Sets file_contents
     *
     * @param string|null $file_contents file_contents
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setFileContents($file_contents)
    {
        $this->container['file_contents'] = $file_contents;

        return $this;
    }

    /**
     * Gets file_location
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getFileLocation()
    {
        return $this->container['file_location'];
    }

    /**
     * Sets file_location
     *
     * @param string|null $file_location file_location
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setFileLocation($file_location)
    {
        $this->container['file_location'] = $file_location;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string|null $file_name file_name
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setFileName($file_name)
    {
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets md5
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getMd5()
    {
        return $this->container['md5'];
    }

    /**
     * Sets md5
     *
     * @param string|null $md5 md5
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setMd5($md5)
    {
        $this->container['md5'] = $md5;

        return $this;
    }

    /**
     * Gets old_cert_format
     *
     * @return string[]|null
     */
    #[\ReturnTypeWillChange]
    public function getOldCertFormat()
    {
        return $this->container['old_cert_format'];
    }

    /**
     * Sets old_cert_format
     *
     * @param string[]|null $old_cert_format old_cert_format
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setOldCertFormat($old_cert_format)
    {
        $this->container['old_cert_format'] = $old_cert_format;

        return $this;
    }

    /**
     * Gets sha1
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getSha1()
    {
        return $this->container['sha1'];
    }

    /**
     * Sets sha1
     *
     * @param string|null $sha1 sha1
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setSha1($sha1)
    {
        $this->container['sha1'] = $sha1;

        return $this;
    }

    /**
     * Gets sha256
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getSha256()
    {
        return $this->container['sha256'];
    }

    /**
     * Sets sha256
     *
     * @param string|null $sha256 sha256
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setSha256($sha256)
    {
        $this->container['sha256'] = $sha256;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token token
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    #[\ReturnTypeWillChange]
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


