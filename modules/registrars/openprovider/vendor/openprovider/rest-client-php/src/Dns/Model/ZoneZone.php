<?php
/**
 * ZoneZone
 *
 * PHP version 5
 *
 * @category Class
 * @package  Openprovider\Api\Rest\Client\Dns
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DNS
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Openprovider\Api\Rest\Client\Dns\Model;

use \ArrayAccess;
use Openprovider\Api\Rest\Client\Base\ObjectSerializer;
use Openprovider\Api\Rest\Client\Base\ModelInterface;

/**
 * ZoneZone Class Doc Comment
 *
 * @category Class
 * @package  Openprovider\Api\Rest\Client\Dns
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ZoneZone implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'zoneZone';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active' => 'bool',
        'creation_date' => 'string',
        'dnskey' => 'string',
        'history' => '\Openprovider\Api\Rest\Client\Dns\Model\HistoryZoneHistory[]',
        'id' => 'int',
        'ip' => 'string',
        'is_deleted' => 'bool',
        'is_shadow' => 'bool',
        'is_spamexperts_enabled' => 'bool',
        'modification_date' => 'string',
        'name' => 'string',
        'premium_dns' => '\Openprovider\Api\Rest\Client\Dns\Model\ZonePremiumDnsData',
        'provider' => 'string',
        'records' => '\Openprovider\Api\Rest\Client\Dns\Model\RecordRecordInfo[]',
        'reseller_id' => 'int',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'active' => 'boolean',
        'creation_date' => null,
        'dnskey' => null,
        'history' => null,
        'id' => 'int32',
        'ip' => null,
        'is_deleted' => 'boolean',
        'is_shadow' => 'boolean',
        'is_spamexperts_enabled' => 'boolean',
        'modification_date' => null,
        'name' => null,
        'premium_dns' => null,
        'provider' => null,
        'records' => null,
        'reseller_id' => 'int32',
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'creation_date' => 'creation_date',
        'dnskey' => 'dnskey',
        'history' => 'history',
        'id' => 'id',
        'ip' => 'ip',
        'is_deleted' => 'is_deleted',
        'is_shadow' => 'is_shadow',
        'is_spamexperts_enabled' => 'is_spamexperts_enabled',
        'modification_date' => 'modification_date',
        'name' => 'name',
        'premium_dns' => 'premium_dns',
        'provider' => 'provider',
        'records' => 'records',
        'reseller_id' => 'reseller_id',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'creation_date' => 'setCreationDate',
        'dnskey' => 'setDnskey',
        'history' => 'setHistory',
        'id' => 'setId',
        'ip' => 'setIp',
        'is_deleted' => 'setIsDeleted',
        'is_shadow' => 'setIsShadow',
        'is_spamexperts_enabled' => 'setIsSpamexpertsEnabled',
        'modification_date' => 'setModificationDate',
        'name' => 'setName',
        'premium_dns' => 'setPremiumDns',
        'provider' => 'setProvider',
        'records' => 'setRecords',
        'reseller_id' => 'setResellerId',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'creation_date' => 'getCreationDate',
        'dnskey' => 'getDnskey',
        'history' => 'getHistory',
        'id' => 'getId',
        'ip' => 'getIp',
        'is_deleted' => 'getIsDeleted',
        'is_shadow' => 'getIsShadow',
        'is_spamexperts_enabled' => 'getIsSpamexpertsEnabled',
        'modification_date' => 'getModificationDate',
        'name' => 'getName',
        'premium_dns' => 'getPremiumDns',
        'provider' => 'getProvider',
        'records' => 'getRecords',
        'reseller_id' => 'getResellerId',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    #[\ReturnTypeWillChange]
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['dnskey'] = isset($data['dnskey']) ? $data['dnskey'] : null;
        $this->container['history'] = isset($data['history']) ? $data['history'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['ip'] = isset($data['ip']) ? $data['ip'] : null;
        $this->container['is_deleted'] = isset($data['is_deleted']) ? $data['is_deleted'] : null;
        $this->container['is_shadow'] = isset($data['is_shadow']) ? $data['is_shadow'] : null;
        $this->container['is_spamexperts_enabled'] = isset($data['is_spamexperts_enabled']) ? $data['is_spamexperts_enabled'] : null;
        $this->container['modification_date'] = isset($data['modification_date']) ? $data['modification_date'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['premium_dns'] = isset($data['premium_dns']) ? $data['premium_dns'] : null;
        $this->container['provider'] = isset($data['provider']) ? $data['provider'] : null;
        $this->container['records'] = isset($data['records']) ? $data['records'] : null;
        $this->container['reseller_id'] = isset($data['reseller_id']) ? $data['reseller_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    #[\ReturnTypeWillChange]
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    #[\ReturnTypeWillChange]
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param string|null $creation_date creation_date
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets dnskey
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getDnskey()
    {
        return $this->container['dnskey'];
    }

    /**
     * Sets dnskey
     *
     * @param string|null $dnskey dnskey
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setDnskey($dnskey)
    {
        $this->container['dnskey'] = $dnskey;

        return $this;
    }

    /**
     * Gets history
     *
     * @return \Openprovider\Api\Rest\Client\Dns\Model\HistoryZoneHistory[]|null
     */
    #[\ReturnTypeWillChange]
    public function getHistory()
    {
        return $this->container['history'];
    }

    /**
     * Sets history
     *
     * @param \Openprovider\Api\Rest\Client\Dns\Model\HistoryZoneHistory[]|null $history history
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setHistory($history)
    {
        $this->container['history'] = $history;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    #[\ReturnTypeWillChange]
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip ip
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted is_deleted
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsDeleted($is_deleted)
    {
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets is_shadow
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getIsShadow()
    {
        return $this->container['is_shadow'];
    }

    /**
     * Sets is_shadow
     *
     * @param bool|null $is_shadow is_shadow
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsShadow($is_shadow)
    {
        $this->container['is_shadow'] = $is_shadow;

        return $this;
    }

    /**
     * Gets is_spamexperts_enabled
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getIsSpamexpertsEnabled()
    {
        return $this->container['is_spamexperts_enabled'];
    }

    /**
     * Sets is_spamexperts_enabled
     *
     * @param bool|null $is_spamexperts_enabled is_spamexperts_enabled
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsSpamexpertsEnabled($is_spamexperts_enabled)
    {
        $this->container['is_spamexperts_enabled'] = $is_spamexperts_enabled;

        return $this;
    }

    /**
     * Gets modification_date
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getModificationDate()
    {
        return $this->container['modification_date'];
    }

    /**
     * Sets modification_date
     *
     * @param string|null $modification_date modification_date
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setModificationDate($modification_date)
    {
        $this->container['modification_date'] = $modification_date;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets premium_dns
     *
     * @return \Openprovider\Api\Rest\Client\Dns\Model\ZonePremiumDnsData|null
     */
    #[\ReturnTypeWillChange]
    public function getPremiumDns()
    {
        return $this->container['premium_dns'];
    }

    /**
     * Sets premium_dns
     *
     * @param \Openprovider\Api\Rest\Client\Dns\Model\ZonePremiumDnsData|null $premium_dns premium_dns
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setPremiumDns($premium_dns)
    {
        $this->container['premium_dns'] = $premium_dns;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string|null $provider provider
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setProvider($provider)
    {
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets records
     *
     * @return \Openprovider\Api\Rest\Client\Dns\Model\RecordRecordInfo[]|null
     */
    #[\ReturnTypeWillChange]
    public function getRecords()
    {
        return $this->container['records'];
    }

    /**
     * Sets records
     *
     * @param \Openprovider\Api\Rest\Client\Dns\Model\RecordRecordInfo[]|null $records records
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setRecords($records)
    {
        $this->container['records'] = $records;

        return $this;
    }

    /**
     * Gets reseller_id
     *
     * @return int|null
     */
    #[\ReturnTypeWillChange]
    public function getResellerId()
    {
        return $this->container['reseller_id'];
    }

    /**
     * Sets reseller_id
     *
     * @param int|null $reseller_id reseller_id
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setResellerId($reseller_id)
    {
        $this->container['reseller_id'] = $reseller_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    #[\ReturnTypeWillChange]
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


