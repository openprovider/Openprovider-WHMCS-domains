<?php
/**
 * ZoneUpdateZoneRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Openprovider\Api\Rest\Client\Dns
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DNS
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Openprovider\Api\Rest\Client\Dns\Model;

use \ArrayAccess;
use Openprovider\Api\Rest\Client\Base\ObjectSerializer;
use Openprovider\Api\Rest\Client\Base\ModelInterface;

/**
 * ZoneUpdateZoneRequest Class Doc Comment
 *
 * @category Class
 * @package  Openprovider\Api\Rest\Client\Dns
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ZoneUpdateZoneRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'zoneUpdateZoneRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'domain' => '\Openprovider\Api\Rest\Client\Dns\Model\ZoneDomain',
        'id' => 'int',
        'is_spamexperts_enabled' => 'bool',
        'master_ip' => 'string',
        'name' => 'string',
        'premium_dns' => '\Openprovider\Api\Rest\Client\Dns\Model\ZonePremiumDnsData',
        'provider' => 'string',
        'records' => '\Openprovider\Api\Rest\Client\Dns\Model\ZoneRecordUpdates',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'domain' => null,
        'id' => 'int32',
        'is_spamexperts_enabled' => 'boolean',
        'master_ip' => null,
        'name' => null,
        'premium_dns' => null,
        'provider' => null,
        'records' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'domain' => 'domain',
        'id' => 'id',
        'is_spamexperts_enabled' => 'is_spamexperts_enabled',
        'master_ip' => 'master_ip',
        'name' => 'name',
        'premium_dns' => 'premium_dns',
        'provider' => 'provider',
        'records' => 'records',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'domain' => 'setDomain',
        'id' => 'setId',
        'is_spamexperts_enabled' => 'setIsSpamexpertsEnabled',
        'master_ip' => 'setMasterIp',
        'name' => 'setName',
        'premium_dns' => 'setPremiumDns',
        'provider' => 'setProvider',
        'records' => 'setRecords',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'domain' => 'getDomain',
        'id' => 'getId',
        'is_spamexperts_enabled' => 'getIsSpamexpertsEnabled',
        'master_ip' => 'getMasterIp',
        'name' => 'getName',
        'premium_dns' => 'getPremiumDns',
        'provider' => 'getProvider',
        'records' => 'getRecords',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    #[\ReturnTypeWillChange]
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_spamexperts_enabled'] = isset($data['is_spamexperts_enabled']) ? $data['is_spamexperts_enabled'] : null;
        $this->container['master_ip'] = isset($data['master_ip']) ? $data['master_ip'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['premium_dns'] = isset($data['premium_dns']) ? $data['premium_dns'] : null;
        $this->container['provider'] = isset($data['provider']) ? $data['provider'] : null;
        $this->container['records'] = isset($data['records']) ? $data['records'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    #[\ReturnTypeWillChange]
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    #[\ReturnTypeWillChange]
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets domain
     *
     * @return \Openprovider\Api\Rest\Client\Dns\Model\ZoneDomain|null
     */
    #[\ReturnTypeWillChange]
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param \Openprovider\Api\Rest\Client\Dns\Model\ZoneDomain|null $domain domain
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    #[\ReturnTypeWillChange]
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_spamexperts_enabled
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getIsSpamexpertsEnabled()
    {
        return $this->container['is_spamexperts_enabled'];
    }

    /**
     * Sets is_spamexperts_enabled
     *
     * @param bool|null $is_spamexperts_enabled is_spamexperts_enabled
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsSpamexpertsEnabled($is_spamexperts_enabled)
    {
        $this->container['is_spamexperts_enabled'] = $is_spamexperts_enabled;

        return $this;
    }

    /**
     * Gets master_ip
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getMasterIp()
    {
        return $this->container['master_ip'];
    }

    /**
     * Sets master_ip
     *
     * @param string|null $master_ip master_ip
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setMasterIp($master_ip)
    {
        $this->container['master_ip'] = $master_ip;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets premium_dns
     *
     * @return \Openprovider\Api\Rest\Client\Dns\Model\ZonePremiumDnsData|null
     */
    #[\ReturnTypeWillChange]
    public function getPremiumDns()
    {
        return $this->container['premium_dns'];
    }

    /**
     * Sets premium_dns
     *
     * @param \Openprovider\Api\Rest\Client\Dns\Model\ZonePremiumDnsData|null $premium_dns premium_dns
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setPremiumDns($premium_dns)
    {
        $this->container['premium_dns'] = $premium_dns;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string|null $provider provider
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setProvider($provider)
    {
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets records
     *
     * @return \Openprovider\Api\Rest\Client\Dns\Model\ZoneRecordUpdates|null
     */
    #[\ReturnTypeWillChange]
    public function getRecords()
    {
        return $this->container['records'];
    }

    /**
     * Sets records
     *
     * @param \Openprovider\Api\Rest\Client\Dns\Model\ZoneRecordUpdates|null $records records
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setRecords($records)
    {
        $this->container['records'] = $records;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    #[\ReturnTypeWillChange]
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


