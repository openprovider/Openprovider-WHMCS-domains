<?php
/**
 * DomainCheckDomainResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Openprovider\Api\Rest\Client\Domain
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Domain
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Openprovider\Api\Rest\Client\Domain\Model;

use \ArrayAccess;
use Openprovider\Api\Rest\Client\Base\ObjectSerializer;
use Openprovider\Api\Rest\Client\Base\ModelInterface;

/**
 * DomainCheckDomainResult Class Doc Comment
 *
 * @category Class
 * @package  Openprovider\Api\Rest\Client\Domain
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DomainCheckDomainResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'domainCheckDomainResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'claim_key' => 'string',
        'domain' => 'string',
        'is_premium' => 'bool',
        'premium' => '\Openprovider\Api\Rest\Client\Domain\Model\DomainPremiumPrice',
        'price' => '\Openprovider\Api\Rest\Client\Domain\Model\DomainPriceGroup',
        'reason' => 'string',
        'status' => 'string',
        'whois' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'claim_key' => null,
        'domain' => null,
        'is_premium' => 'boolean',
        'premium' => null,
        'price' => null,
        'reason' => null,
        'status' => null,
        'whois' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'claim_key' => 'claim_key',
        'domain' => 'domain',
        'is_premium' => 'is_premium',
        'premium' => 'premium',
        'price' => 'price',
        'reason' => 'reason',
        'status' => 'status',
        'whois' => 'whois'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'claim_key' => 'setClaimKey',
        'domain' => 'setDomain',
        'is_premium' => 'setIsPremium',
        'premium' => 'setPremium',
        'price' => 'setPrice',
        'reason' => 'setReason',
        'status' => 'setStatus',
        'whois' => 'setWhois'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'claim_key' => 'getClaimKey',
        'domain' => 'getDomain',
        'is_premium' => 'getIsPremium',
        'premium' => 'getPremium',
        'price' => 'getPrice',
        'reason' => 'getReason',
        'status' => 'getStatus',
        'whois' => 'getWhois'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    #[\ReturnTypeWillChange]
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['claim_key'] = isset($data['claim_key']) ? $data['claim_key'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['is_premium'] = isset($data['is_premium']) ? $data['is_premium'] : null;
        $this->container['premium'] = isset($data['premium']) ? $data['premium'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['whois'] = isset($data['whois']) ? $data['whois'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    #[\ReturnTypeWillChange]
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    #[\ReturnTypeWillChange]
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets claim_key
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getClaimKey()
    {
        return $this->container['claim_key'];
    }

    /**
     * Sets claim_key
     *
     * @param string|null $claim_key claim_key
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setClaimKey($claim_key)
    {
        $this->container['claim_key'] = $claim_key;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain domain
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets is_premium
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getIsPremium()
    {
        return $this->container['is_premium'];
    }

    /**
     * Sets is_premium
     *
     * @param bool|null $is_premium is_premium
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsPremium($is_premium)
    {
        $this->container['is_premium'] = $is_premium;

        return $this;
    }

    /**
     * Gets premium
     *
     * @return \Openprovider\Api\Rest\Client\Domain\Model\DomainPremiumPrice|null
     */
    #[\ReturnTypeWillChange]
    public function getPremium()
    {
        return $this->container['premium'];
    }

    /**
     * Sets premium
     *
     * @param \Openprovider\Api\Rest\Client\Domain\Model\DomainPremiumPrice|null $premium premium
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setPremium($premium)
    {
        $this->container['premium'] = $premium;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \Openprovider\Api\Rest\Client\Domain\Model\DomainPriceGroup|null
     */
    #[\ReturnTypeWillChange]
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \Openprovider\Api\Rest\Client\Domain\Model\DomainPriceGroup|null $price price
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string|null $reason reason
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets whois
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getWhois()
    {
        return $this->container['whois'];
    }

    /**
     * Sets whois
     *
     * @param string|null $whois whois
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setWhois($whois)
    {
        $this->container['whois'] = $whois;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    #[\ReturnTypeWillChange]
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


