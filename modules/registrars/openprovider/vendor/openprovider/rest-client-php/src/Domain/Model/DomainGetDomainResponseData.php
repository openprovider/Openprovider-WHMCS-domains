<?php
/**
 * DomainGetDomainResponseData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Openprovider\Api\Rest\Client\Domain
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Domain
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Openprovider\Api\Rest\Client\Domain\Model;

use \ArrayAccess;
use Openprovider\Api\Rest\Client\Base\ObjectSerializer;
use Openprovider\Api\Rest\Client\Base\ModelInterface;

/**
 * DomainGetDomainResponseData Class Doc Comment
 *
 * @category Class
 * @package  Openprovider\Api\Rest\Client\Domain
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DomainGetDomainResponseData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'domainGetDomainResponseData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'abuse_details' => '\Openprovider\Api\Rest\Client\Domain\Model\DomainAbuseDetails',
        'active_date' => 'string',
        'additional_data' => '\Openprovider\Api\Rest\Client\Domain\Model\DomainAdditionalData',
        'admin_handle' => 'string',
        'api_history' => '\Openprovider\Api\Rest\Client\Domain\Model\DomainApiHistory[]',
        'application_id' => 'string',
        'application_mode' => 'string',
        'application_mode_expiration_date' => 'string',
        'application_mode_title' => 'string',
        'application_notice_id' => 'string',
        'application_smd' => 'string',
        'auth_code' => 'string',
        'autorenew' => 'string',
        'billing_handle' => 'string',
        'can_renew' => 'bool',
        'comments' => 'string',
        'comments_last_changed_at' => 'string',
        'creation_date' => 'string',
        'delete_status' => 'string',
        'deleted_at' => 'string',
        'dnssec' => 'string',
        'dnssec_keys' => '\Openprovider\Api\Rest\Client\Domain\Model\DomainDnssecKey[]',
        'domain' => '\Openprovider\Api\Rest\Client\Domain\Model\DomainDomain',
        'expiration_date' => 'string',
        'hard_quarantine_expiry_date' => 'string',
        'has_active_sectigo_zone' => 'bool',
        'has_history' => 'bool',
        'history' => '\Openprovider\Api\Rest\Client\Domain\Model\DomainHistory[]',
        'id' => 'int',
        'internal_auth_code' => 'string',
        'is_abusive' => 'bool',
        'is_client_hold_enabled' => 'string',
        'is_deleted' => 'bool',
        'is_dnssec_enabled' => 'bool',
        'is_hosted_whois' => 'bool',
        'is_lockable' => 'bool',
        'is_locked' => 'bool',
        'is_parked' => 'bool',
        'is_premium' => 'bool',
        'is_private_whois_allowed' => 'bool',
        'is_private_whois_enabled' => 'bool',
        'is_sectigo_dns_enabled' => 'bool',
        'is_spamexperts_enabled' => 'bool',
        'last_changed' => 'string',
        'modify_owner_allowed' => 'bool',
        'name_servers' => '\Openprovider\Api\Rest\Client\Domain\Model\DomainNameserver[]',
        'ns_group' => 'string',
        'ns_template_id' => 'int',
        'ns_template_name' => 'string',
        'nsgroup_id' => 'int',
        'order_date' => 'string',
        'owner' => '\Openprovider\Api\Rest\Client\Domain\Model\DomainOwner',
        'owner_company_name' => 'string',
        'owner_handle' => 'string',
        'quarantine_expiration_date' => 'string',
        'registry_expiration_date' => 'string',
        'registry_statuses' => '\Openprovider\Api\Rest\Client\Domain\Model\DomainRegistryStatuses',
        'renew' => 'int',
        'renewal_date' => 'string',
        'reseller_handle' => 'string',
        'reseller_id' => 'int',
        'restorable_until' => 'string',
        'scheduled_at' => 'string',
        'scheduled_from' => 'string',
        'soft_quarantine_expiry_date' => 'string',
        'status' => 'string',
        'tech_handle' => 'string',
        'trade_allowed' => 'bool',
        'trade_auth_code_required' => 'string',
        'transfer_auth_code_required' => 'string',
        'transfer_cancel_supported' => 'bool',
        'type' => 'string',
        'unit' => 'string',
        'use_domicile' => 'bool',
        'verification_email_exp_date' => 'string',
        'verification_email_name' => 'string',
        'verification_email_status' => 'string',
        'verification_email_status_description' => 'string',
        'whois_privacy_data' => '\Openprovider\Api\Rest\Client\Domain\Model\DomainWhoisPrivacyData'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'abuse_details' => null,
        'active_date' => null,
        'additional_data' => null,
        'admin_handle' => null,
        'api_history' => null,
        'application_id' => null,
        'application_mode' => null,
        'application_mode_expiration_date' => null,
        'application_mode_title' => null,
        'application_notice_id' => null,
        'application_smd' => null,
        'auth_code' => null,
        'autorenew' => null,
        'billing_handle' => null,
        'can_renew' => 'boolean',
        'comments' => null,
        'comments_last_changed_at' => null,
        'creation_date' => null,
        'delete_status' => null,
        'deleted_at' => null,
        'dnssec' => null,
        'dnssec_keys' => null,
        'domain' => null,
        'expiration_date' => null,
        'hard_quarantine_expiry_date' => null,
        'has_active_sectigo_zone' => 'boolean',
        'has_history' => 'boolean',
        'history' => null,
        'id' => 'int32',
        'internal_auth_code' => null,
        'is_abusive' => 'boolean',
        'is_client_hold_enabled' => null,
        'is_deleted' => 'boolean',
        'is_dnssec_enabled' => 'boolean',
        'is_hosted_whois' => 'boolean',
        'is_lockable' => 'boolean',
        'is_locked' => 'boolean',
        'is_parked' => 'boolean',
        'is_premium' => 'boolean',
        'is_private_whois_allowed' => 'boolean',
        'is_private_whois_enabled' => 'boolean',
        'is_sectigo_dns_enabled' => 'boolean',
        'is_spamexperts_enabled' => 'boolean',
        'last_changed' => null,
        'modify_owner_allowed' => 'boolean',
        'name_servers' => null,
        'ns_group' => null,
        'ns_template_id' => 'int32',
        'ns_template_name' => null,
        'nsgroup_id' => 'int32',
        'order_date' => null,
        'owner' => null,
        'owner_company_name' => null,
        'owner_handle' => null,
        'quarantine_expiration_date' => null,
        'registry_expiration_date' => null,
        'registry_statuses' => null,
        'renew' => 'int32',
        'renewal_date' => null,
        'reseller_handle' => null,
        'reseller_id' => 'int32',
        'restorable_until' => null,
        'scheduled_at' => null,
        'scheduled_from' => null,
        'soft_quarantine_expiry_date' => null,
        'status' => null,
        'tech_handle' => null,
        'trade_allowed' => 'boolean',
        'trade_auth_code_required' => null,
        'transfer_auth_code_required' => null,
        'transfer_cancel_supported' => 'boolean',
        'type' => null,
        'unit' => null,
        'use_domicile' => 'boolean',
        'verification_email_exp_date' => null,
        'verification_email_name' => null,
        'verification_email_status' => null,
        'verification_email_status_description' => null,
        'whois_privacy_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'abuse_details' => 'abuse_details',
        'active_date' => 'active_date',
        'additional_data' => 'additional_data',
        'admin_handle' => 'admin_handle',
        'api_history' => 'api_history',
        'application_id' => 'application_id',
        'application_mode' => 'application_mode',
        'application_mode_expiration_date' => 'application_mode_expiration_date',
        'application_mode_title' => 'application_mode_title',
        'application_notice_id' => 'application_notice_id',
        'application_smd' => 'application_smd',
        'auth_code' => 'auth_code',
        'autorenew' => 'autorenew',
        'billing_handle' => 'billing_handle',
        'can_renew' => 'can_renew',
        'comments' => 'comments',
        'comments_last_changed_at' => 'comments_last_changed_at',
        'creation_date' => 'creation_date',
        'delete_status' => 'delete_status',
        'deleted_at' => 'deleted_at',
        'dnssec' => 'dnssec',
        'dnssec_keys' => 'dnssec_keys',
        'domain' => 'domain',
        'expiration_date' => 'expiration_date',
        'hard_quarantine_expiry_date' => 'hard_quarantine_expiry_date',
        'has_active_sectigo_zone' => 'has_active_sectigo_zone',
        'has_history' => 'has_history',
        'history' => 'history',
        'id' => 'id',
        'internal_auth_code' => 'internal_auth_code',
        'is_abusive' => 'is_abusive',
        'is_client_hold_enabled' => 'is_client_hold_enabled',
        'is_deleted' => 'is_deleted',
        'is_dnssec_enabled' => 'is_dnssec_enabled',
        'is_hosted_whois' => 'is_hosted_whois',
        'is_lockable' => 'is_lockable',
        'is_locked' => 'is_locked',
        'is_parked' => 'is_parked',
        'is_premium' => 'is_premium',
        'is_private_whois_allowed' => 'is_private_whois_allowed',
        'is_private_whois_enabled' => 'is_private_whois_enabled',
        'is_sectigo_dns_enabled' => 'is_sectigo_dns_enabled',
        'is_spamexperts_enabled' => 'is_spamexperts_enabled',
        'last_changed' => 'last_changed',
        'modify_owner_allowed' => 'modify_owner_allowed',
        'name_servers' => 'name_servers',
        'ns_group' => 'ns_group',
        'ns_template_id' => 'ns_template_id',
        'ns_template_name' => 'ns_template_name',
        'nsgroup_id' => 'nsgroup_id',
        'order_date' => 'order_date',
        'owner' => 'owner',
        'owner_company_name' => 'owner_company_name',
        'owner_handle' => 'owner_handle',
        'quarantine_expiration_date' => 'quarantine_expiration_date',
        'registry_expiration_date' => 'registry_expiration_date',
        'registry_statuses' => 'registry_statuses',
        'renew' => 'renew',
        'renewal_date' => 'renewal_date',
        'reseller_handle' => 'reseller_handle',
        'reseller_id' => 'reseller_id',
        'restorable_until' => 'restorable_until',
        'scheduled_at' => 'scheduled_at',
        'scheduled_from' => 'scheduled_from',
        'soft_quarantine_expiry_date' => 'soft_quarantine_expiry_date',
        'status' => 'status',
        'tech_handle' => 'tech_handle',
        'trade_allowed' => 'trade_allowed',
        'trade_auth_code_required' => 'trade_auth_code_required',
        'transfer_auth_code_required' => 'transfer_auth_code_required',
        'transfer_cancel_supported' => 'transfer_cancel_supported',
        'type' => 'type',
        'unit' => 'unit',
        'use_domicile' => 'use_domicile',
        'verification_email_exp_date' => 'verification_email_exp_date',
        'verification_email_name' => 'verification_email_name',
        'verification_email_status' => 'verification_email_status',
        'verification_email_status_description' => 'verification_email_status_description',
        'whois_privacy_data' => 'whois_privacy_data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'abuse_details' => 'setAbuseDetails',
        'active_date' => 'setActiveDate',
        'additional_data' => 'setAdditionalData',
        'admin_handle' => 'setAdminHandle',
        'api_history' => 'setApiHistory',
        'application_id' => 'setApplicationId',
        'application_mode' => 'setApplicationMode',
        'application_mode_expiration_date' => 'setApplicationModeExpirationDate',
        'application_mode_title' => 'setApplicationModeTitle',
        'application_notice_id' => 'setApplicationNoticeId',
        'application_smd' => 'setApplicationSmd',
        'auth_code' => 'setAuthCode',
        'autorenew' => 'setAutorenew',
        'billing_handle' => 'setBillingHandle',
        'can_renew' => 'setCanRenew',
        'comments' => 'setComments',
        'comments_last_changed_at' => 'setCommentsLastChangedAt',
        'creation_date' => 'setCreationDate',
        'delete_status' => 'setDeleteStatus',
        'deleted_at' => 'setDeletedAt',
        'dnssec' => 'setDnssec',
        'dnssec_keys' => 'setDnssecKeys',
        'domain' => 'setDomain',
        'expiration_date' => 'setExpirationDate',
        'hard_quarantine_expiry_date' => 'setHardQuarantineExpiryDate',
        'has_active_sectigo_zone' => 'setHasActiveSectigoZone',
        'has_history' => 'setHasHistory',
        'history' => 'setHistory',
        'id' => 'setId',
        'internal_auth_code' => 'setInternalAuthCode',
        'is_abusive' => 'setIsAbusive',
        'is_client_hold_enabled' => 'setIsClientHoldEnabled',
        'is_deleted' => 'setIsDeleted',
        'is_dnssec_enabled' => 'setIsDnssecEnabled',
        'is_hosted_whois' => 'setIsHostedWhois',
        'is_lockable' => 'setIsLockable',
        'is_locked' => 'setIsLocked',
        'is_parked' => 'setIsParked',
        'is_premium' => 'setIsPremium',
        'is_private_whois_allowed' => 'setIsPrivateWhoisAllowed',
        'is_private_whois_enabled' => 'setIsPrivateWhoisEnabled',
        'is_sectigo_dns_enabled' => 'setIsSectigoDnsEnabled',
        'is_spamexperts_enabled' => 'setIsSpamexpertsEnabled',
        'last_changed' => 'setLastChanged',
        'modify_owner_allowed' => 'setModifyOwnerAllowed',
        'name_servers' => 'setNameServers',
        'ns_group' => 'setNsGroup',
        'ns_template_id' => 'setNsTemplateId',
        'ns_template_name' => 'setNsTemplateName',
        'nsgroup_id' => 'setNsgroupId',
        'order_date' => 'setOrderDate',
        'owner' => 'setOwner',
        'owner_company_name' => 'setOwnerCompanyName',
        'owner_handle' => 'setOwnerHandle',
        'quarantine_expiration_date' => 'setQuarantineExpirationDate',
        'registry_expiration_date' => 'setRegistryExpirationDate',
        'registry_statuses' => 'setRegistryStatuses',
        'renew' => 'setRenew',
        'renewal_date' => 'setRenewalDate',
        'reseller_handle' => 'setResellerHandle',
        'reseller_id' => 'setResellerId',
        'restorable_until' => 'setRestorableUntil',
        'scheduled_at' => 'setScheduledAt',
        'scheduled_from' => 'setScheduledFrom',
        'soft_quarantine_expiry_date' => 'setSoftQuarantineExpiryDate',
        'status' => 'setStatus',
        'tech_handle' => 'setTechHandle',
        'trade_allowed' => 'setTradeAllowed',
        'trade_auth_code_required' => 'setTradeAuthCodeRequired',
        'transfer_auth_code_required' => 'setTransferAuthCodeRequired',
        'transfer_cancel_supported' => 'setTransferCancelSupported',
        'type' => 'setType',
        'unit' => 'setUnit',
        'use_domicile' => 'setUseDomicile',
        'verification_email_exp_date' => 'setVerificationEmailExpDate',
        'verification_email_name' => 'setVerificationEmailName',
        'verification_email_status' => 'setVerificationEmailStatus',
        'verification_email_status_description' => 'setVerificationEmailStatusDescription',
        'whois_privacy_data' => 'setWhoisPrivacyData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'abuse_details' => 'getAbuseDetails',
        'active_date' => 'getActiveDate',
        'additional_data' => 'getAdditionalData',
        'admin_handle' => 'getAdminHandle',
        'api_history' => 'getApiHistory',
        'application_id' => 'getApplicationId',
        'application_mode' => 'getApplicationMode',
        'application_mode_expiration_date' => 'getApplicationModeExpirationDate',
        'application_mode_title' => 'getApplicationModeTitle',
        'application_notice_id' => 'getApplicationNoticeId',
        'application_smd' => 'getApplicationSmd',
        'auth_code' => 'getAuthCode',
        'autorenew' => 'getAutorenew',
        'billing_handle' => 'getBillingHandle',
        'can_renew' => 'getCanRenew',
        'comments' => 'getComments',
        'comments_last_changed_at' => 'getCommentsLastChangedAt',
        'creation_date' => 'getCreationDate',
        'delete_status' => 'getDeleteStatus',
        'deleted_at' => 'getDeletedAt',
        'dnssec' => 'getDnssec',
        'dnssec_keys' => 'getDnssecKeys',
        'domain' => 'getDomain',
        'expiration_date' => 'getExpirationDate',
        'hard_quarantine_expiry_date' => 'getHardQuarantineExpiryDate',
        'has_active_sectigo_zone' => 'getHasActiveSectigoZone',
        'has_history' => 'getHasHistory',
        'history' => 'getHistory',
        'id' => 'getId',
        'internal_auth_code' => 'getInternalAuthCode',
        'is_abusive' => 'getIsAbusive',
        'is_client_hold_enabled' => 'getIsClientHoldEnabled',
        'is_deleted' => 'getIsDeleted',
        'is_dnssec_enabled' => 'getIsDnssecEnabled',
        'is_hosted_whois' => 'getIsHostedWhois',
        'is_lockable' => 'getIsLockable',
        'is_locked' => 'getIsLocked',
        'is_parked' => 'getIsParked',
        'is_premium' => 'getIsPremium',
        'is_private_whois_allowed' => 'getIsPrivateWhoisAllowed',
        'is_private_whois_enabled' => 'getIsPrivateWhoisEnabled',
        'is_sectigo_dns_enabled' => 'getIsSectigoDnsEnabled',
        'is_spamexperts_enabled' => 'getIsSpamexpertsEnabled',
        'last_changed' => 'getLastChanged',
        'modify_owner_allowed' => 'getModifyOwnerAllowed',
        'name_servers' => 'getNameServers',
        'ns_group' => 'getNsGroup',
        'ns_template_id' => 'getNsTemplateId',
        'ns_template_name' => 'getNsTemplateName',
        'nsgroup_id' => 'getNsgroupId',
        'order_date' => 'getOrderDate',
        'owner' => 'getOwner',
        'owner_company_name' => 'getOwnerCompanyName',
        'owner_handle' => 'getOwnerHandle',
        'quarantine_expiration_date' => 'getQuarantineExpirationDate',
        'registry_expiration_date' => 'getRegistryExpirationDate',
        'registry_statuses' => 'getRegistryStatuses',
        'renew' => 'getRenew',
        'renewal_date' => 'getRenewalDate',
        'reseller_handle' => 'getResellerHandle',
        'reseller_id' => 'getResellerId',
        'restorable_until' => 'getRestorableUntil',
        'scheduled_at' => 'getScheduledAt',
        'scheduled_from' => 'getScheduledFrom',
        'soft_quarantine_expiry_date' => 'getSoftQuarantineExpiryDate',
        'status' => 'getStatus',
        'tech_handle' => 'getTechHandle',
        'trade_allowed' => 'getTradeAllowed',
        'trade_auth_code_required' => 'getTradeAuthCodeRequired',
        'transfer_auth_code_required' => 'getTransferAuthCodeRequired',
        'transfer_cancel_supported' => 'getTransferCancelSupported',
        'type' => 'getType',
        'unit' => 'getUnit',
        'use_domicile' => 'getUseDomicile',
        'verification_email_exp_date' => 'getVerificationEmailExpDate',
        'verification_email_name' => 'getVerificationEmailName',
        'verification_email_status' => 'getVerificationEmailStatus',
        'verification_email_status_description' => 'getVerificationEmailStatusDescription',
        'whois_privacy_data' => 'getWhoisPrivacyData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    #[\ReturnTypeWillChange]
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    #[\ReturnTypeWillChange]
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['abuse_details'] = isset($data['abuse_details']) ? $data['abuse_details'] : null;
        $this->container['active_date'] = isset($data['active_date']) ? $data['active_date'] : null;
        $this->container['additional_data'] = isset($data['additional_data']) ? $data['additional_data'] : null;
        $this->container['admin_handle'] = isset($data['admin_handle']) ? $data['admin_handle'] : null;
        $this->container['api_history'] = isset($data['api_history']) ? $data['api_history'] : null;
        $this->container['application_id'] = isset($data['application_id']) ? $data['application_id'] : null;
        $this->container['application_mode'] = isset($data['application_mode']) ? $data['application_mode'] : null;
        $this->container['application_mode_expiration_date'] = isset($data['application_mode_expiration_date']) ? $data['application_mode_expiration_date'] : null;
        $this->container['application_mode_title'] = isset($data['application_mode_title']) ? $data['application_mode_title'] : null;
        $this->container['application_notice_id'] = isset($data['application_notice_id']) ? $data['application_notice_id'] : null;
        $this->container['application_smd'] = isset($data['application_smd']) ? $data['application_smd'] : null;
        $this->container['auth_code'] = isset($data['auth_code']) ? $data['auth_code'] : null;
        $this->container['autorenew'] = isset($data['autorenew']) ? $data['autorenew'] : null;
        $this->container['billing_handle'] = isset($data['billing_handle']) ? $data['billing_handle'] : null;
        $this->container['can_renew'] = isset($data['can_renew']) ? $data['can_renew'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['comments_last_changed_at'] = isset($data['comments_last_changed_at']) ? $data['comments_last_changed_at'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['delete_status'] = isset($data['delete_status']) ? $data['delete_status'] : null;
        $this->container['deleted_at'] = isset($data['deleted_at']) ? $data['deleted_at'] : null;
        $this->container['dnssec'] = isset($data['dnssec']) ? $data['dnssec'] : null;
        $this->container['dnssec_keys'] = isset($data['dnssec_keys']) ? $data['dnssec_keys'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['hard_quarantine_expiry_date'] = isset($data['hard_quarantine_expiry_date']) ? $data['hard_quarantine_expiry_date'] : null;
        $this->container['has_active_sectigo_zone'] = isset($data['has_active_sectigo_zone']) ? $data['has_active_sectigo_zone'] : null;
        $this->container['has_history'] = isset($data['has_history']) ? $data['has_history'] : null;
        $this->container['history'] = isset($data['history']) ? $data['history'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['internal_auth_code'] = isset($data['internal_auth_code']) ? $data['internal_auth_code'] : null;
        $this->container['is_abusive'] = isset($data['is_abusive']) ? $data['is_abusive'] : null;
        $this->container['is_client_hold_enabled'] = isset($data['is_client_hold_enabled']) ? $data['is_client_hold_enabled'] : null;
        $this->container['is_deleted'] = isset($data['is_deleted']) ? $data['is_deleted'] : null;
        $this->container['is_dnssec_enabled'] = isset($data['is_dnssec_enabled']) ? $data['is_dnssec_enabled'] : null;
        $this->container['is_hosted_whois'] = isset($data['is_hosted_whois']) ? $data['is_hosted_whois'] : null;
        $this->container['is_lockable'] = isset($data['is_lockable']) ? $data['is_lockable'] : null;
        $this->container['is_locked'] = isset($data['is_locked']) ? $data['is_locked'] : null;
        $this->container['is_parked'] = isset($data['is_parked']) ? $data['is_parked'] : null;
        $this->container['is_premium'] = isset($data['is_premium']) ? $data['is_premium'] : null;
        $this->container['is_private_whois_allowed'] = isset($data['is_private_whois_allowed']) ? $data['is_private_whois_allowed'] : null;
        $this->container['is_private_whois_enabled'] = isset($data['is_private_whois_enabled']) ? $data['is_private_whois_enabled'] : null;
        $this->container['is_sectigo_dns_enabled'] = isset($data['is_sectigo_dns_enabled']) ? $data['is_sectigo_dns_enabled'] : null;
        $this->container['is_spamexperts_enabled'] = isset($data['is_spamexperts_enabled']) ? $data['is_spamexperts_enabled'] : null;
        $this->container['last_changed'] = isset($data['last_changed']) ? $data['last_changed'] : null;
        $this->container['modify_owner_allowed'] = isset($data['modify_owner_allowed']) ? $data['modify_owner_allowed'] : null;
        $this->container['name_servers'] = isset($data['name_servers']) ? $data['name_servers'] : null;
        $this->container['ns_group'] = isset($data['ns_group']) ? $data['ns_group'] : null;
        $this->container['ns_template_id'] = isset($data['ns_template_id']) ? $data['ns_template_id'] : null;
        $this->container['ns_template_name'] = isset($data['ns_template_name']) ? $data['ns_template_name'] : null;
        $this->container['nsgroup_id'] = isset($data['nsgroup_id']) ? $data['nsgroup_id'] : null;
        $this->container['order_date'] = isset($data['order_date']) ? $data['order_date'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['owner_company_name'] = isset($data['owner_company_name']) ? $data['owner_company_name'] : null;
        $this->container['owner_handle'] = isset($data['owner_handle']) ? $data['owner_handle'] : null;
        $this->container['quarantine_expiration_date'] = isset($data['quarantine_expiration_date']) ? $data['quarantine_expiration_date'] : null;
        $this->container['registry_expiration_date'] = isset($data['registry_expiration_date']) ? $data['registry_expiration_date'] : null;
        $this->container['registry_statuses'] = isset($data['registry_statuses']) ? $data['registry_statuses'] : null;
        $this->container['renew'] = isset($data['renew']) ? $data['renew'] : null;
        $this->container['renewal_date'] = isset($data['renewal_date']) ? $data['renewal_date'] : null;
        $this->container['reseller_handle'] = isset($data['reseller_handle']) ? $data['reseller_handle'] : null;
        $this->container['reseller_id'] = isset($data['reseller_id']) ? $data['reseller_id'] : null;
        $this->container['restorable_until'] = isset($data['restorable_until']) ? $data['restorable_until'] : null;
        $this->container['scheduled_at'] = isset($data['scheduled_at']) ? $data['scheduled_at'] : null;
        $this->container['scheduled_from'] = isset($data['scheduled_from']) ? $data['scheduled_from'] : null;
        $this->container['soft_quarantine_expiry_date'] = isset($data['soft_quarantine_expiry_date']) ? $data['soft_quarantine_expiry_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tech_handle'] = isset($data['tech_handle']) ? $data['tech_handle'] : null;
        $this->container['trade_allowed'] = isset($data['trade_allowed']) ? $data['trade_allowed'] : null;
        $this->container['trade_auth_code_required'] = isset($data['trade_auth_code_required']) ? $data['trade_auth_code_required'] : null;
        $this->container['transfer_auth_code_required'] = isset($data['transfer_auth_code_required']) ? $data['transfer_auth_code_required'] : null;
        $this->container['transfer_cancel_supported'] = isset($data['transfer_cancel_supported']) ? $data['transfer_cancel_supported'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['use_domicile'] = isset($data['use_domicile']) ? $data['use_domicile'] : null;
        $this->container['verification_email_exp_date'] = isset($data['verification_email_exp_date']) ? $data['verification_email_exp_date'] : null;
        $this->container['verification_email_name'] = isset($data['verification_email_name']) ? $data['verification_email_name'] : null;
        $this->container['verification_email_status'] = isset($data['verification_email_status']) ? $data['verification_email_status'] : null;
        $this->container['verification_email_status_description'] = isset($data['verification_email_status_description']) ? $data['verification_email_status_description'] : null;
        $this->container['whois_privacy_data'] = isset($data['whois_privacy_data']) ? $data['whois_privacy_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    #[\ReturnTypeWillChange]
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    #[\ReturnTypeWillChange]
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets abuse_details
     *
     * @return \Openprovider\Api\Rest\Client\Domain\Model\DomainAbuseDetails|null
     */
    #[\ReturnTypeWillChange]
    public function getAbuseDetails()
    {
        return $this->container['abuse_details'];
    }

    /**
     * Sets abuse_details
     *
     * @param \Openprovider\Api\Rest\Client\Domain\Model\DomainAbuseDetails|null $abuse_details abuse_details
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setAbuseDetails($abuse_details)
    {
        $this->container['abuse_details'] = $abuse_details;

        return $this;
    }

    /**
     * Gets active_date
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getActiveDate()
    {
        return $this->container['active_date'];
    }

    /**
     * Sets active_date
     *
     * @param string|null $active_date active_date
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setActiveDate($active_date)
    {
        $this->container['active_date'] = $active_date;

        return $this;
    }

    /**
     * Gets additional_data
     *
     * @return \Openprovider\Api\Rest\Client\Domain\Model\DomainAdditionalData|null
     */
    #[\ReturnTypeWillChange]
    public function getAdditionalData()
    {
        return $this->container['additional_data'];
    }

    /**
     * Sets additional_data
     *
     * @param \Openprovider\Api\Rest\Client\Domain\Model\DomainAdditionalData|null $additional_data additional_data
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setAdditionalData($additional_data)
    {
        $this->container['additional_data'] = $additional_data;

        return $this;
    }

    /**
     * Gets admin_handle
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getAdminHandle()
    {
        return $this->container['admin_handle'];
    }

    /**
     * Sets admin_handle
     *
     * @param string|null $admin_handle admin_handle
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setAdminHandle($admin_handle)
    {
        $this->container['admin_handle'] = $admin_handle;

        return $this;
    }

    /**
     * Gets api_history
     *
     * @return \Openprovider\Api\Rest\Client\Domain\Model\DomainApiHistory[]|null
     */
    #[\ReturnTypeWillChange]
    public function getApiHistory()
    {
        return $this->container['api_history'];
    }

    /**
     * Sets api_history
     *
     * @param \Openprovider\Api\Rest\Client\Domain\Model\DomainApiHistory[]|null $api_history api_history
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setApiHistory($api_history)
    {
        $this->container['api_history'] = $api_history;

        return $this;
    }

    /**
     * Gets application_id
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getApplicationId()
    {
        return $this->container['application_id'];
    }

    /**
     * Sets application_id
     *
     * @param string|null $application_id application_id
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setApplicationId($application_id)
    {
        $this->container['application_id'] = $application_id;

        return $this;
    }

    /**
     * Gets application_mode
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getApplicationMode()
    {
        return $this->container['application_mode'];
    }

    /**
     * Sets application_mode
     *
     * @param string|null $application_mode When new gTLD is started it gets through several phases before it becomes available for registration to everybody (General availability or GA). There are several phases before GA when it is still possible to apply for a domain, but with some restrictions.
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setApplicationMode($application_mode)
    {
        $this->container['application_mode'] = $application_mode;

        return $this;
    }

    /**
     * Gets application_mode_expiration_date
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getApplicationModeExpirationDate()
    {
        return $this->container['application_mode_expiration_date'];
    }

    /**
     * Sets application_mode_expiration_date
     *
     * @param string|null $application_mode_expiration_date application_mode_expiration_date
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setApplicationModeExpirationDate($application_mode_expiration_date)
    {
        $this->container['application_mode_expiration_date'] = $application_mode_expiration_date;

        return $this;
    }

    /**
     * Gets application_mode_title
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getApplicationModeTitle()
    {
        return $this->container['application_mode_title'];
    }

    /**
     * Sets application_mode_title
     *
     * @param string|null $application_mode_title application_mode_title
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setApplicationModeTitle($application_mode_title)
    {
        $this->container['application_mode_title'] = $application_mode_title;

        return $this;
    }

    /**
     * Gets application_notice_id
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getApplicationNoticeId()
    {
        return $this->container['application_notice_id'];
    }

    /**
     * Sets application_notice_id
     *
     * @param string|null $application_notice_id application_notice_id
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setApplicationNoticeId($application_notice_id)
    {
        $this->container['application_notice_id'] = $application_notice_id;

        return $this;
    }

    /**
     * Gets application_smd
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getApplicationSmd()
    {
        return $this->container['application_smd'];
    }

    /**
     * Sets application_smd
     *
     * @param string|null $application_smd application_smd
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setApplicationSmd($application_smd)
    {
        $this->container['application_smd'] = $application_smd;

        return $this;
    }

    /**
     * Gets auth_code
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getAuthCode()
    {
        return $this->container['auth_code'];
    }

    /**
     * Sets auth_code
     *
     * @param string|null $auth_code auth_code
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setAuthCode($auth_code)
    {
        $this->container['auth_code'] = $auth_code;

        return $this;
    }

    /**
     * Gets autorenew
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getAutorenew()
    {
        return $this->container['autorenew'];
    }

    /**
     * Sets autorenew
     *
     * @param string|null $autorenew autorenew
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setAutorenew($autorenew)
    {
        $this->container['autorenew'] = $autorenew;

        return $this;
    }

    /**
     * Gets billing_handle
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getBillingHandle()
    {
        return $this->container['billing_handle'];
    }

    /**
     * Sets billing_handle
     *
     * @param string|null $billing_handle billing_handle
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setBillingHandle($billing_handle)
    {
        $this->container['billing_handle'] = $billing_handle;

        return $this;
    }

    /**
     * Gets can_renew
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getCanRenew()
    {
        return $this->container['can_renew'];
    }

    /**
     * Sets can_renew
     *
     * @param bool|null $can_renew can_renew
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setCanRenew($can_renew)
    {
        $this->container['can_renew'] = $can_renew;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments comments
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets comments_last_changed_at
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getCommentsLastChangedAt()
    {
        return $this->container['comments_last_changed_at'];
    }

    /**
     * Sets comments_last_changed_at
     *
     * @param string|null $comments_last_changed_at comments_last_changed_at
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setCommentsLastChangedAt($comments_last_changed_at)
    {
        $this->container['comments_last_changed_at'] = $comments_last_changed_at;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param string|null $creation_date creation_date
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets delete_status
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getDeleteStatus()
    {
        return $this->container['delete_status'];
    }

    /**
     * Sets delete_status
     *
     * @param string|null $delete_status delete_status
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setDeleteStatus($delete_status)
    {
        $this->container['delete_status'] = $delete_status;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param string|null $deleted_at deleted_at
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setDeletedAt($deleted_at)
    {
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets dnssec
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getDnssec()
    {
        return $this->container['dnssec'];
    }

    /**
     * Sets dnssec
     *
     * @param string|null $dnssec Indicates, if DNSSEC is enabled. Possible values: signedDelegation, unsigned.
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setDnssec($dnssec)
    {
        $this->container['dnssec'] = $dnssec;

        return $this;
    }

    /**
     * Gets dnssec_keys
     *
     * @return \Openprovider\Api\Rest\Client\Domain\Model\DomainDnssecKey[]|null
     */
    #[\ReturnTypeWillChange]
    public function getDnssecKeys()
    {
        return $this->container['dnssec_keys'];
    }

    /**
     * Sets dnssec_keys
     *
     * @param \Openprovider\Api\Rest\Client\Domain\Model\DomainDnssecKey[]|null $dnssec_keys dnssec_keys
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setDnssecKeys($dnssec_keys)
    {
        $this->container['dnssec_keys'] = $dnssec_keys;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return \Openprovider\Api\Rest\Client\Domain\Model\DomainDomain|null
     */
    #[\ReturnTypeWillChange]
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param \Openprovider\Api\Rest\Client\Domain\Model\DomainDomain|null $domain domain
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param string|null $expiration_date expiration_date
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets hard_quarantine_expiry_date
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getHardQuarantineExpiryDate()
    {
        return $this->container['hard_quarantine_expiry_date'];
    }

    /**
     * Sets hard_quarantine_expiry_date
     *
     * @param string|null $hard_quarantine_expiry_date hard_quarantine_expiry_date
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setHardQuarantineExpiryDate($hard_quarantine_expiry_date)
    {
        $this->container['hard_quarantine_expiry_date'] = $hard_quarantine_expiry_date;

        return $this;
    }

    /**
     * Gets has_active_sectigo_zone
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getHasActiveSectigoZone()
    {
        return $this->container['has_active_sectigo_zone'];
    }

    /**
     * Sets has_active_sectigo_zone
     *
     * @param bool|null $has_active_sectigo_zone has_active_sectigo_zone
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setHasActiveSectigoZone($has_active_sectigo_zone)
    {
        $this->container['has_active_sectigo_zone'] = $has_active_sectigo_zone;

        return $this;
    }

    /**
     * Gets has_history
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getHasHistory()
    {
        return $this->container['has_history'];
    }

    /**
     * Sets has_history
     *
     * @param bool|null $has_history has_history
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setHasHistory($has_history)
    {
        $this->container['has_history'] = $has_history;

        return $this;
    }

    /**
     * Gets history
     *
     * @return \Openprovider\Api\Rest\Client\Domain\Model\DomainHistory[]|null
     */
    #[\ReturnTypeWillChange]
    public function getHistory()
    {
        return $this->container['history'];
    }

    /**
     * Sets history
     *
     * @param \Openprovider\Api\Rest\Client\Domain\Model\DomainHistory[]|null $history history
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setHistory($history)
    {
        $this->container['history'] = $history;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    #[\ReturnTypeWillChange]
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets internal_auth_code
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getInternalAuthCode()
    {
        return $this->container['internal_auth_code'];
    }

    /**
     * Sets internal_auth_code
     *
     * @param string|null $internal_auth_code internal_auth_code
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setInternalAuthCode($internal_auth_code)
    {
        $this->container['internal_auth_code'] = $internal_auth_code;

        return $this;
    }

    /**
     * Gets is_abusive
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getIsAbusive()
    {
        return $this->container['is_abusive'];
    }

    /**
     * Sets is_abusive
     *
     * @param bool|null $is_abusive is_abusive
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsAbusive($is_abusive)
    {
        $this->container['is_abusive'] = $is_abusive;

        return $this;
    }

    /**
     * Gets is_client_hold_enabled
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getIsClientHoldEnabled()
    {
        return $this->container['is_client_hold_enabled'];
    }

    /**
     * Sets is_client_hold_enabled
     *
     * @param string|null $is_client_hold_enabled is_client_hold_enabled
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsClientHoldEnabled($is_client_hold_enabled)
    {
        $this->container['is_client_hold_enabled'] = $is_client_hold_enabled;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted is_deleted
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsDeleted($is_deleted)
    {
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets is_dnssec_enabled
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getIsDnssecEnabled()
    {
        return $this->container['is_dnssec_enabled'];
    }

    /**
     * Sets is_dnssec_enabled
     *
     * @param bool|null $is_dnssec_enabled is_dnssec_enabled
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsDnssecEnabled($is_dnssec_enabled)
    {
        $this->container['is_dnssec_enabled'] = $is_dnssec_enabled;

        return $this;
    }

    /**
     * Gets is_hosted_whois
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getIsHostedWhois()
    {
        return $this->container['is_hosted_whois'];
    }

    /**
     * Sets is_hosted_whois
     *
     * @param bool|null $is_hosted_whois is_hosted_whois
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsHostedWhois($is_hosted_whois)
    {
        $this->container['is_hosted_whois'] = $is_hosted_whois;

        return $this;
    }

    /**
     * Gets is_lockable
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getIsLockable()
    {
        return $this->container['is_lockable'];
    }

    /**
     * Sets is_lockable
     *
     * @param bool|null $is_lockable is_lockable
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsLockable($is_lockable)
    {
        $this->container['is_lockable'] = $is_lockable;

        return $this;
    }

    /**
     * Gets is_locked
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getIsLocked()
    {
        return $this->container['is_locked'];
    }

    /**
     * Sets is_locked
     *
     * @param bool|null $is_locked is_locked
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsLocked($is_locked)
    {
        $this->container['is_locked'] = $is_locked;

        return $this;
    }

    /**
     * Gets is_parked
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getIsParked()
    {
        return $this->container['is_parked'];
    }

    /**
     * Sets is_parked
     *
     * @param bool|null $is_parked is_parked
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsParked($is_parked)
    {
        $this->container['is_parked'] = $is_parked;

        return $this;
    }

    /**
     * Gets is_premium
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getIsPremium()
    {
        return $this->container['is_premium'];
    }

    /**
     * Sets is_premium
     *
     * @param bool|null $is_premium is_premium
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsPremium($is_premium)
    {
        $this->container['is_premium'] = $is_premium;

        return $this;
    }

    /**
     * Gets is_private_whois_allowed
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getIsPrivateWhoisAllowed()
    {
        return $this->container['is_private_whois_allowed'];
    }

    /**
     * Sets is_private_whois_allowed
     *
     * @param bool|null $is_private_whois_allowed is_private_whois_allowed
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsPrivateWhoisAllowed($is_private_whois_allowed)
    {
        $this->container['is_private_whois_allowed'] = $is_private_whois_allowed;

        return $this;
    }

    /**
     * Gets is_private_whois_enabled
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getIsPrivateWhoisEnabled()
    {
        return $this->container['is_private_whois_enabled'];
    }

    /**
     * Sets is_private_whois_enabled
     *
     * @param bool|null $is_private_whois_enabled is_private_whois_enabled
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsPrivateWhoisEnabled($is_private_whois_enabled)
    {
        $this->container['is_private_whois_enabled'] = $is_private_whois_enabled;

        return $this;
    }

    /**
     * Gets is_sectigo_dns_enabled
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getIsSectigoDnsEnabled()
    {
        return $this->container['is_sectigo_dns_enabled'];
    }

    /**
     * Sets is_sectigo_dns_enabled
     *
     * @param bool|null $is_sectigo_dns_enabled is_sectigo_dns_enabled
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsSectigoDnsEnabled($is_sectigo_dns_enabled)
    {
        $this->container['is_sectigo_dns_enabled'] = $is_sectigo_dns_enabled;

        return $this;
    }

    /**
     * Gets is_spamexperts_enabled
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getIsSpamexpertsEnabled()
    {
        return $this->container['is_spamexperts_enabled'];
    }

    /**
     * Sets is_spamexperts_enabled
     *
     * @param bool|null $is_spamexperts_enabled is_spamexperts_enabled
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setIsSpamexpertsEnabled($is_spamexperts_enabled)
    {
        $this->container['is_spamexperts_enabled'] = $is_spamexperts_enabled;

        return $this;
    }

    /**
     * Gets last_changed
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getLastChanged()
    {
        return $this->container['last_changed'];
    }

    /**
     * Sets last_changed
     *
     * @param string|null $last_changed last_changed
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setLastChanged($last_changed)
    {
        $this->container['last_changed'] = $last_changed;

        return $this;
    }

    /**
     * Gets modify_owner_allowed
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getModifyOwnerAllowed()
    {
        return $this->container['modify_owner_allowed'];
    }

    /**
     * Sets modify_owner_allowed
     *
     * @param bool|null $modify_owner_allowed modify_owner_allowed
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setModifyOwnerAllowed($modify_owner_allowed)
    {
        $this->container['modify_owner_allowed'] = $modify_owner_allowed;

        return $this;
    }

    /**
     * Gets name_servers
     *
     * @return \Openprovider\Api\Rest\Client\Domain\Model\DomainNameserver[]|null
     */
    #[\ReturnTypeWillChange]
    public function getNameServers()
    {
        return $this->container['name_servers'];
    }

    /**
     * Sets name_servers
     *
     * @param \Openprovider\Api\Rest\Client\Domain\Model\DomainNameserver[]|null $name_servers name_servers
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setNameServers($name_servers)
    {
        $this->container['name_servers'] = $name_servers;

        return $this;
    }

    /**
     * Gets ns_group
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getNsGroup()
    {
        return $this->container['ns_group'];
    }

    /**
     * Sets ns_group
     *
     * @param string|null $ns_group ns_group
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setNsGroup($ns_group)
    {
        $this->container['ns_group'] = $ns_group;

        return $this;
    }

    /**
     * Gets ns_template_id
     *
     * @return int|null
     */
    #[\ReturnTypeWillChange]
    public function getNsTemplateId()
    {
        return $this->container['ns_template_id'];
    }

    /**
     * Sets ns_template_id
     *
     * @param int|null $ns_template_id ns_template_id
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setNsTemplateId($ns_template_id)
    {
        $this->container['ns_template_id'] = $ns_template_id;

        return $this;
    }

    /**
     * Gets ns_template_name
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getNsTemplateName()
    {
        return $this->container['ns_template_name'];
    }

    /**
     * Sets ns_template_name
     *
     * @param string|null $ns_template_name ns_template_name
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setNsTemplateName($ns_template_name)
    {
        $this->container['ns_template_name'] = $ns_template_name;

        return $this;
    }

    /**
     * Gets nsgroup_id
     *
     * @return int|null
     */
    #[\ReturnTypeWillChange]
    public function getNsgroupId()
    {
        return $this->container['nsgroup_id'];
    }

    /**
     * Sets nsgroup_id
     *
     * @param int|null $nsgroup_id nsgroup_id
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setNsgroupId($nsgroup_id)
    {
        $this->container['nsgroup_id'] = $nsgroup_id;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param string|null $order_date order_date
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setOrderDate($order_date)
    {
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \Openprovider\Api\Rest\Client\Domain\Model\DomainOwner|null
     */
    #[\ReturnTypeWillChange]
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \Openprovider\Api\Rest\Client\Domain\Model\DomainOwner|null $owner owner
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets owner_company_name
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getOwnerCompanyName()
    {
        return $this->container['owner_company_name'];
    }

    /**
     * Sets owner_company_name
     *
     * @param string|null $owner_company_name owner_company_name
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setOwnerCompanyName($owner_company_name)
    {
        $this->container['owner_company_name'] = $owner_company_name;

        return $this;
    }

    /**
     * Gets owner_handle
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getOwnerHandle()
    {
        return $this->container['owner_handle'];
    }

    /**
     * Sets owner_handle
     *
     * @param string|null $owner_handle owner_handle
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setOwnerHandle($owner_handle)
    {
        $this->container['owner_handle'] = $owner_handle;

        return $this;
    }

    /**
     * Gets quarantine_expiration_date
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getQuarantineExpirationDate()
    {
        return $this->container['quarantine_expiration_date'];
    }

    /**
     * Sets quarantine_expiration_date
     *
     * @param string|null $quarantine_expiration_date quarantine_expiration_date
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setQuarantineExpirationDate($quarantine_expiration_date)
    {
        $this->container['quarantine_expiration_date'] = $quarantine_expiration_date;

        return $this;
    }

    /**
     * Gets registry_expiration_date
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getRegistryExpirationDate()
    {
        return $this->container['registry_expiration_date'];
    }

    /**
     * Sets registry_expiration_date
     *
     * @param string|null $registry_expiration_date registry_expiration_date
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setRegistryExpirationDate($registry_expiration_date)
    {
        $this->container['registry_expiration_date'] = $registry_expiration_date;

        return $this;
    }

    /**
     * Gets registry_statuses
     *
     * @return \Openprovider\Api\Rest\Client\Domain\Model\DomainRegistryStatuses|null
     */
    #[\ReturnTypeWillChange]
    public function getRegistryStatuses()
    {
        return $this->container['registry_statuses'];
    }

    /**
     * Sets registry_statuses
     *
     * @param \Openprovider\Api\Rest\Client\Domain\Model\DomainRegistryStatuses|null $registry_statuses registry_statuses
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setRegistryStatuses($registry_statuses)
    {
        $this->container['registry_statuses'] = $registry_statuses;

        return $this;
    }

    /**
     * Gets renew
     *
     * @return int|null
     */
    #[\ReturnTypeWillChange]
    public function getRenew()
    {
        return $this->container['renew'];
    }

    /**
     * Sets renew
     *
     * @param int|null $renew renew
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setRenew($renew)
    {
        $this->container['renew'] = $renew;

        return $this;
    }

    /**
     * Gets renewal_date
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getRenewalDate()
    {
        return $this->container['renewal_date'];
    }

    /**
     * Sets renewal_date
     *
     * @param string|null $renewal_date renewal_date
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setRenewalDate($renewal_date)
    {
        $this->container['renewal_date'] = $renewal_date;

        return $this;
    }

    /**
     * Gets reseller_handle
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getResellerHandle()
    {
        return $this->container['reseller_handle'];
    }

    /**
     * Sets reseller_handle
     *
     * @param string|null $reseller_handle reseller_handle
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setResellerHandle($reseller_handle)
    {
        $this->container['reseller_handle'] = $reseller_handle;

        return $this;
    }

    /**
     * Gets reseller_id
     *
     * @return int|null
     */
    #[\ReturnTypeWillChange]
    public function getResellerId()
    {
        return $this->container['reseller_id'];
    }

    /**
     * Sets reseller_id
     *
     * @param int|null $reseller_id reseller_id
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setResellerId($reseller_id)
    {
        $this->container['reseller_id'] = $reseller_id;

        return $this;
    }

    /**
     * Gets restorable_until
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getRestorableUntil()
    {
        return $this->container['restorable_until'];
    }

    /**
     * Sets restorable_until
     *
     * @param string|null $restorable_until restorable_until
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setRestorableUntil($restorable_until)
    {
        $this->container['restorable_until'] = $restorable_until;

        return $this;
    }

    /**
     * Gets scheduled_at
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getScheduledAt()
    {
        return $this->container['scheduled_at'];
    }

    /**
     * Sets scheduled_at
     *
     * @param string|null $scheduled_at scheduled_at
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setScheduledAt($scheduled_at)
    {
        $this->container['scheduled_at'] = $scheduled_at;

        return $this;
    }

    /**
     * Gets scheduled_from
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getScheduledFrom()
    {
        return $this->container['scheduled_from'];
    }

    /**
     * Sets scheduled_from
     *
     * @param string|null $scheduled_from scheduled_from
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setScheduledFrom($scheduled_from)
    {
        $this->container['scheduled_from'] = $scheduled_from;

        return $this;
    }

    /**
     * Gets soft_quarantine_expiry_date
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getSoftQuarantineExpiryDate()
    {
        return $this->container['soft_quarantine_expiry_date'];
    }

    /**
     * Sets soft_quarantine_expiry_date
     *
     * @param string|null $soft_quarantine_expiry_date soft_quarantine_expiry_date
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setSoftQuarantineExpiryDate($soft_quarantine_expiry_date)
    {
        $this->container['soft_quarantine_expiry_date'] = $soft_quarantine_expiry_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tech_handle
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getTechHandle()
    {
        return $this->container['tech_handle'];
    }

    /**
     * Sets tech_handle
     *
     * @param string|null $tech_handle tech_handle
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setTechHandle($tech_handle)
    {
        $this->container['tech_handle'] = $tech_handle;

        return $this;
    }

    /**
     * Gets trade_allowed
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getTradeAllowed()
    {
        return $this->container['trade_allowed'];
    }

    /**
     * Sets trade_allowed
     *
     * @param bool|null $trade_allowed trade_allowed
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setTradeAllowed($trade_allowed)
    {
        $this->container['trade_allowed'] = $trade_allowed;

        return $this;
    }

    /**
     * Gets trade_auth_code_required
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getTradeAuthCodeRequired()
    {
        return $this->container['trade_auth_code_required'];
    }

    /**
     * Sets trade_auth_code_required
     *
     * @param string|null $trade_auth_code_required trade_auth_code_required
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setTradeAuthCodeRequired($trade_auth_code_required)
    {
        $this->container['trade_auth_code_required'] = $trade_auth_code_required;

        return $this;
    }

    /**
     * Gets transfer_auth_code_required
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getTransferAuthCodeRequired()
    {
        return $this->container['transfer_auth_code_required'];
    }

    /**
     * Sets transfer_auth_code_required
     *
     * @param string|null $transfer_auth_code_required transfer_auth_code_required
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setTransferAuthCodeRequired($transfer_auth_code_required)
    {
        $this->container['transfer_auth_code_required'] = $transfer_auth_code_required;

        return $this;
    }

    /**
     * Gets transfer_cancel_supported
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getTransferCancelSupported()
    {
        return $this->container['transfer_cancel_supported'];
    }

    /**
     * Sets transfer_cancel_supported
     *
     * @param bool|null $transfer_cancel_supported transfer_cancel_supported
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setTransferCancelSupported($transfer_cancel_supported)
    {
        $this->container['transfer_cancel_supported'] = $transfer_cancel_supported;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit unit
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets use_domicile
     *
     * @return bool|null
     */
    #[\ReturnTypeWillChange]
    public function getUseDomicile()
    {
        return $this->container['use_domicile'];
    }

    /**
     * Sets use_domicile
     *
     * @param bool|null $use_domicile use_domicile
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setUseDomicile($use_domicile)
    {
        $this->container['use_domicile'] = $use_domicile;

        return $this;
    }

    /**
     * Gets verification_email_exp_date
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getVerificationEmailExpDate()
    {
        return $this->container['verification_email_exp_date'];
    }

    /**
     * Sets verification_email_exp_date
     *
     * @param string|null $verification_email_exp_date verification_email_exp_date
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setVerificationEmailExpDate($verification_email_exp_date)
    {
        $this->container['verification_email_exp_date'] = $verification_email_exp_date;

        return $this;
    }

    /**
     * Gets verification_email_name
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getVerificationEmailName()
    {
        return $this->container['verification_email_name'];
    }

    /**
     * Sets verification_email_name
     *
     * @param string|null $verification_email_name verification_email_name
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setVerificationEmailName($verification_email_name)
    {
        $this->container['verification_email_name'] = $verification_email_name;

        return $this;
    }

    /**
     * Gets verification_email_status
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getVerificationEmailStatus()
    {
        return $this->container['verification_email_status'];
    }

    /**
     * Sets verification_email_status
     *
     * @param string|null $verification_email_status verification_email_status
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setVerificationEmailStatus($verification_email_status)
    {
        $this->container['verification_email_status'] = $verification_email_status;

        return $this;
    }

    /**
     * Gets verification_email_status_description
     *
     * @return string|null
     */
    #[\ReturnTypeWillChange]
    public function getVerificationEmailStatusDescription()
    {
        return $this->container['verification_email_status_description'];
    }

    /**
     * Sets verification_email_status_description
     *
     * @param string|null $verification_email_status_description verification_email_status_description
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setVerificationEmailStatusDescription($verification_email_status_description)
    {
        $this->container['verification_email_status_description'] = $verification_email_status_description;

        return $this;
    }

    /**
     * Gets whois_privacy_data
     *
     * @return \Openprovider\Api\Rest\Client\Domain\Model\DomainWhoisPrivacyData|null
     */
    #[\ReturnTypeWillChange]
    public function getWhoisPrivacyData()
    {
        return $this->container['whois_privacy_data'];
    }

    /**
     * Sets whois_privacy_data
     *
     * @param \Openprovider\Api\Rest\Client\Domain\Model\DomainWhoisPrivacyData|null $whois_privacy_data whois_privacy_data
     *
     * @return $this
     */
    #[\ReturnTypeWillChange]
    public function setWhoisPrivacyData($whois_privacy_data)
    {
        $this->container['whois_privacy_data'] = $whois_privacy_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    #[\ReturnTypeWillChange]
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


